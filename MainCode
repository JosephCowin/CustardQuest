// Finish making descriptions, add names -o

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;

namespace CustardQuest
{
    class Program
    {
        static bool optJokey = false;
        static bool optSound = true;
        static bool optColour = true;

        string[,] items = new string[0, 14]; //name, mass, blessings and curses, container and method, limbs, stats (0 is hp "," is seperator), extra, alignment to player, target, sentience, damage, description, dialog, moving

        static string attackInfo = "";  //target,max damage, variation, min, speed, location, limb, limb damage | [next attack]


        static System.Timers.Timer aTimer;

        private static void OnTimedEvent(Object source, ElapsedEventArgs e)
        {
            string output = "";

            for (int i = 0; i < Sections(attackInfo, "|"); i++)
            {
                if (i != 0)
                {
                    output = output + "|";
                }
                string attack = selectSection(attackInfo, "|", i);
                string target = selectSection(attack, ",", 0);
                string maxdam = selectSection(attack, ",", 1);
                string variat = selectSection(attack, ",", 2);
                string mindam = selectSection(attack, ",", 3);
                double speed = Convert.ToDouble(selectSection(attack, ",", 4));
                double location = Convert.ToDouble(selectSection(attack, ",", 5));
                string limb = selectSection(attack, ",", 6);
                string limbdam = selectSection(attack, ",", 7);

                location += speed;
                if (location <= 150)
                {
                    output = output + attack + "," + target + "," + maxdam + "," + variat + "," + mindam + "," + speed.ToString() + "," + location.ToString() + "," + limb + "," + limbdam;
                }
                else
                {
                    if (target == "1")
                    {
                        //   items[1,5] = 
                    }




                }


            }

            attackInfo = output;
        }

        public static string name(string species, string Class, string extra)
        {
            string output = "";
            string syllables = "";


            switch (species)
            {
                case "Human":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Kill\Heat|skull\sink| Death\ Murder|master\causer\superious";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Elf":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Dwarf":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Orc":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Gnome":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Goblin":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Tiefling":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Kobold":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Skeleton":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                default:
                    syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    break;
            }


            Random rng = new Random();
            for (int i = 0; i < Sections(syllables, @"|"); i++)
            {
                string current = selectSection(syllables, @"|", i);
                int j = rng.Next(0, Sections(current, @"\"));
                output += selectSection(current, @"\", j);
            }



            switch (Class)
            {
                case "Fighter":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Druid":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Wizard":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Monk":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Paladin":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Ranger":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Thief":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"scrubster";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                default:
                    syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    break;
            }

            string outputT = "";

            for (int i = 0; i < Sections(syllables, @"|"); i++)
            {
                if (i != 0)
                {
                    if (outputT != "")
                    {
                        string current = selectSection(syllables, @"|", i);
                        int j = rng.Next(0, Sections(current, @"\"));
                        outputT += selectSection(current, @"\", j);
                    }
                }
                else
                {
                    string current = selectSection(syllables, @"|", i);
                    int j = rng.Next(0, Sections(current, @"\"));
                    outputT += selectSection(current, @"\", j);

                    if (outputT != "")
                    {
                        outputT = " " + outputT;
                    }
                }
            }

            output += outputT;

            return output;
        }

        public static string cycle(string input, string type, bool right = true)
        {
            string output = "";
            string[] options = new string[1];
            options[0] = "";

            if (type == "gender")
            {
                options = new string[] { "Male", "Female" };
            }
            else if (type == "race")
            {
                options = new string[] { "Human", "Elf", "Dwarf", "Orc", "Gnome", "Goblin", "Tiefling", "Kobold", "Skeleton" };
            }
            else if (type == "class")
            {
                options = new string[] { "Fighter", "Druid", "Wizard", "Monk", "Paladin", "Ranger", "Thief", "Warlock" };
            }
            else if (type == "difficulty")
            {
                options = new string[] { "Easy", "Normal", "Hard", "Impossible" };
            }
            else if (type == "location")
            {
                options = new string[] { "Mansion", "Dungeon - Crypt", "Dungeon - Basement", "Dungeon - Treasure Store", "Cemetery", "Shrine", "Temple", "Sentient Forest", "Sentient Cave", "Sentient House", "Haunted House", "Abandoned Village", "Trap Maker's Shop", "Magic School" };
            }


            int inputCode = -1;
            for (int i = 0; i < options.Length; i++)
            {
                if (input == options[i])
                {
                    inputCode = i;
                }
            }
            if (inputCode != -1)
            {
                if (right)
                {
                    inputCode++;
                }
                else
                {
                    inputCode += -1;
                }
                if (inputCode < 0)
                {
                    inputCode = options.Length - 1;
                }
                if (inputCode == options.Length)
                {
                    inputCode = 0;
                }
                output = options[inputCode];
            }
            else
            {
                output = "FAIL";
            }


            return output;
        }

        public static string info(string input, string type)
        {
            string output = "";

            if (type == "gender")
            {
                if (input == "Male")
                {
                    output = "Are you Male or Female?";
                }
                else if (input == "Female")
                {
                    output = "Are you Male or Female?";
                }
            }
            else if (type == "race")
            {
                if (input == "Human")
                {
                    output = "A well rounded race that can't do anthing special.";
                }
                else if (input == "Elf")
                {
                    output = "Very smart individuals who would use their mind over matter.";
                    if (optJokey)
                    {
                        output = "Lifeless individuals who do not care for the lesser races.";
                    }
                }
                else if (input == "Dwarf")
                {
                    output = "Short, strong and wise.";
                    if (optJokey)
                    {
                        output = "Short, strong, wise and a raging alcoholic.";
                    }
                }
                else if (input == "Orc")
                {
                    output = "Very strong and not very bright.";
                    if (optJokey)
                    {
                        output = "ORC SMASH";
                    }
                }
                else if (input == "Gnome")
                {
                    output = "Great at magic but not much else.";
                    if (optJokey)
                    {
                        output = "Pretty bad tbh.";
                    }
                }
                else if (input == "Goblin")
                {
                    output = "Small selfish humanoids who can sneak anywhere.";
                    if (optJokey)
                    {
                        output = "Sneaky Beaky Like.";
                    }
                }
                else if (input == "Tiefling")
                {
                    output = "Trained in the offensive schools of magic.";
                    if (optJokey)
                    {
                        output = "Wierd demon folk who no one likes. Also into Scat. Horns provide extra clumsiness.";
                    }
                }
                else if (input == "Kobold")
                {
                    output = "Kobalds are small fury creatures who aren't very special.";
                    if (optJokey)
                    {
                        output = "KOBALLLLLLLLLDDDDDD.";
                    }
                }
                else if (input == "Skeleton")
                {
                    output = "Skeletons are restless souls who are stuck on this plane.";
                    if (optJokey)
                    {
                        output = "Thank mr Skeltal";
                    }
                }
            }
            else if (type == "Erace")
            {
                if (input == "Human")
                {
                    output = "Base 7 STR, 7 FLX, 7 MND. No other special feats.";
                }
                else if (input == "Elf")
                {
                    output = "Base 2 STR, 8 FLX, 11 MND. No other special feats.";
                }
                else if (input == "Dwarf")
                {
                    output = "Base 9 STR, 4 FLX, 7 MND. Item repair is more effective.";
                }
                else if (input == "Orc")
                {
                    output = "Base 16 STR, 4 FLX, 1 MND. Skilled with strength weapons.";
                }
                else if (input == "Gnome")
                {
                    output = "Base 7 STR, 3 FLX, 10 MND. Shop prices are lowered.";
                }
                else if (input == "Goblin")
                {
                    output = "Base 2 STR, 13 FLX, 1 MND. Can recruit fellow goblins and harder to detect.";
                }
                else if (input == "Tiefling")
                {
                    output = "Base 8 STR, 3 FLX, 9 MND. Skilled at offencive magic.";
                }
                else if (input == "Kobold")
                {
                    output = "Base 4 STR, 9 FLX, 2 MND. Special resistance and can frenzy causing MND to be added to STR";
                }
                else if (input == "Skeleton")
                {
                    output = "Base 4 STR, 3 FLX, 10 MND. Weak to smash attacks but resistant to both slash and special attacks. Can’t eat to heal but automatically  heals over time.";
                }
            }
            else if (type == "class")
            {
                if (input == "Fighter")
                {
                    output = "Trained in the arts of melee from birth but not skilled at much else.";
                }
                else if (input == "Druid")
                {
                    output = "Intune with the force of nature meaning that they can control and befriend animals.";
                }
                else if (input == "Wizard")
                {
                    output = "Can focus mystical energies and form them into powerful spells.";
                }
                else if (input == "Monk")
                {
                    output = "Trained in the ways of Ki monks can unleash devastating unarmed attacks.";
                }
                else if (input == "Paladin")
                {
                    output = "After taking a sacred oath to protect the land and its people in the name of one powerful deity.";
                }
                else if (input == "Ranger")
                {
                    output = "Trained with a bow and can prepare excellent food from their slain enemies.";
                }
                else if (input == "Thief")
                {
                    output = "Aligned with one code - the code of thieves.";
                }
                else if (input == "Warlock")
                {
                    output = "Made a deal with a dark demon to drain his life force for powerful magics.";
                }

            }
            else if (type == "Eclass")
            {
                if (input == "Fighter")
                {
                    output = "Starts with a steel broadsword, steel shield and scalemail.";
                }
                else if (input == "Druid")
                {
                    output = "Starts with a wrist claw, ancient staff of nature and a wild ruby amulet.";
                }
                else if (input == "Wizard")
                {
                    output = "Starts with a wooden staff of arcane, enchanted cloth robes and a spellbook.";
                }
                else if (input == "Monk")
                {
                    output = "Starts with monk robes and a Ki pool.";
                }
                else if (input == "Paladin")
                {
                    output = "Starts with a hammer of light, a tall shield, padded leather armour and a light heal spell.";
                }
                else if (input == "Ranger")
                {
                    output = "Starts with a light bow and some arrows, leather armour and an animal companion.";
                }
                else if (input == "Thief")
                {
                    output = "Starts with a dagger and light stealth clothing.";
                }
                else if (input == "Warlock")
                {
                    output = "Starts with a sacrificial dagger, light clothing and a blood drain spell.";
                }

            }
            else if (type == "stats")
            {
                if (input == "Strength")
                {
                    output = "Melee Weapons, HP, Poison Resist";
                }
                else if (input == "Flexibility")
                {
                    output = "Affects hit rate and dodging, flexibility weapons.";
                }
                else if (input == "Mind")
                {
                    output = "Identifying items, magic, perception, curse resistance, detecting traps.";
                }
            }
            else if (type == "menu")
            {
                if (input == "0")
                {
                    output = "gender";
                }
                else if (input == "1")
                {
                    output = "race";
                }
                else if (input == "2")
                {
                    output = "class";
                }
            }
            else if (type == "difficulty")//skill bonus points,blessing/curse points
            {
                if (input == "Easy")
                {
                    output = "15,5";
                }
                else if (input == "Normal")
                {
                    output = "10,0";
                }
                else if (input == "Hard")
                {
                    output = "5,-5";
                }
                else if (input == "Impossible")
                {
                    output = "0,-20";
                }
            }
            else if (type == "idifficulty")
            {
                if (input == "Easy")
                {
                    output = "An easier game. Smaller floors, weaker enemies, easier attacks. More blessings and less curses.";
                }
                else if (input == "Normal")
                {
                    output = "The standard game. Everything is balanced.";
                }
                else if (input == "Hard")
                {
                    output = "A hard experience. Big floors, sporadic beneficial items, rarer item qualities, harder enemies. Spells are weaker and longer.";
                }
                else if (input == "Impossible")
                {
                    output = "How the game was meant to be played. You must have many curses, spells will be weaker, rooms will be almost bare of useful items, enemies will be almost impossible to kill alone.";
                }
            }
            else if (type == "location")
            {
                if (input == "Mansion")
                {
                    output = "";

                    if (optJokey)
                    {
                        output = "";
                    }
                }
                else if (input == "Dungeon - Crypt")
                {
                    output = "";
                }
                else if (input == "Dungeon - Basement")
                {
                    output = "";
                }
                else if (input == "Dungeon - Treasure Store")
                {
                    output = "";
                }
                else if (input == "Cemetery")
                {
                    output = "";
                }
                else if (input == "Shrine")
                {
                    output = "";
                }
                else if (input == "Temple")
                {
                    output = "";
                }
                else if (input == "Sentient Forest")
                {
                    output = "";
                }
                else if (input == "Sentient Cave")
                {
                    output = "";
                }
                else if (input == "Sentient House")
                {
                    output = "";
                }
                else if (input == "Haunted House")
                {
                    output = "";
                }
                else if (input == "Abandoned Village")
                {
                    output = "";
                }
                else if (input == "Trap Maker's Shop")
                {
                    output = "";
                }
                else if (input == "Magic School")
                {
                    output = "";
                }
            }


            return output;
        }


        public static void text(string input)
        {
            Console.ForegroundColor = ConsoleColor.White;
            int wait = 0;       //cyan - inputs for the user, white - default, grey - values that can be directly changed, green - good alerts, red - bad alerts or dealt damage, yellow - neutral alerts and general highlighting
            bool playing = false;
            bool allLettersVoice = false;
            bool waitForSound = false;
            string output = "";

            for (int i = 0; i < input.Length; i++)
            {
                if (input.Substring(i, 1) == "\\")
                {  //Text colour effects: c-cyan,g-grey,e-green,r-red,w-white,y-yellow,1-6 wait time, v-start/stop voice, b-alllettersvoice toggle, B-waitforsound to end toggle, \\/@"\"-\, \"-", £- newline, $ -clear
                    i++; //Use \\ or \ if using @ prior to quotes to have special effects
                    if (input.Substring(i, 1) == "c" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Cyan; }
                    else if (input.Substring(i, 1) == "g" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Gray; }
                    else if (input.Substring(i, 1) == "e" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Green; }
                    else if (input.Substring(i, 1) == "r" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Red; }
                    else if (input.Substring(i, 1) == "w" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.White; }
                    else if (input.Substring(i, 1) == "y" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Yellow; }
                    else if (input.Substring(i, 1) == "1") { wait = 0; }
                    else if (input.Substring(i, 1) == "2") { wait = 100; }
                    else if (input.Substring(i, 1) == "3") { wait = 250; }
                    else if (input.Substring(i, 1) == "4") { wait = 500; }
                    else if (input.Substring(i, 1) == "5") { wait = 1000; }
                    else if (input.Substring(i, 1) == "6") { wait = 2000; }
                    else if (input.Substring(i, 1) == "v") { playing = !playing; }
                    else if (input.Substring(i, 1) == "b") { allLettersVoice = !allLettersVoice; }
                    else if (input.Substring(i, 1) == "B") { waitForSound = !waitForSound; }
                    else if (input.Substring(i, 1) == "\\") { Console.Write("\\"); }
                    else if (input.Substring(i, 1) == "!") { Console.Write("\""); }
                    else if (input.Substring(i, 1) == "£") { output += "\n"; }
                    else if (input.Substring(i, 1) == "$") { Console.Clear(); }
                }
                else
                {
                    output += (input.Substring(i, 1));


                    if (optSound && (playing && ((Convert.ToChar(input.Substring(i, 1)) <= 'z' && Convert.ToChar(input.Substring(i, 1)) >= 'a') || (Convert.ToChar(input.Substring(i, 1)) <= 'Z' && Convert.ToChar(input.Substring(i, 1)) >= 'A')) && (allLettersVoice || Convert.ToChar(input.Substring(i, 1)) == 'u' || Convert.ToChar(input.Substring(i, 1)) == 'o' || (Convert.ToChar(input.Substring(i, 1)) == 'i' || Convert.ToChar(input.Substring(i, 1)) == 'e' || Convert.ToChar(input.Substring(i, 1)) == 'a'))))
                    {
                        if (waitForSound)
                        {
                            // voice.PlaySync();
                        }
                        else
                        {
                            // voice.Play();
                        }
                    }
                }
                if (wait != 0)
                {
                    System.Threading.Thread.Sleep(wait);
                }
            }
            Console.WriteLine(output);
        }

        public static int Sections(string input, string seperator) //outputs the amount of sections in the string, seperated by the seperator (so minimum 1)
        {
            int found = 1;

            for (int i = 0; i < input.Length - (seperator.Length - 1); i++)
            {
                if (input.Substring(i, seperator.Length) == seperator)
                {
                    found++;
                    i += seperator.Length - 1;
                }
            }
            return found;
        }
        public static string selectSection(string input, string seperator, int section, int priorSectionafter = 1) //section ranges from 0 to the maximum section
        {//pSa 0 = all before section, 1 = section, 2 = all after section, 3 = all excluding section
            string selected = input;
            int maxSect = Sections(input, seperator) - 1;
            int curSect = 0;
            if (priorSectionafter == 1)
            {
                while (curSect < section)
                {
                    int i = 0;
                    bool donesection = false;
                    while (!donesection)
                    {
                        if (selected.Substring(i, seperator.Length) == seperator)
                        {
                            selected = selected.Substring(i + seperator.Length);
                            donesection = true;
                        }
                        i++;
                    }
                    curSect++;
                }
                if (section < maxSect)
                {

                    int i = 0;
                    bool donesection = false;
                    while (!donesection)
                    {
                        if (selected.Substring(i, seperator.Length) == seperator)
                        {
                            selected = selected.Substring(0, i);
                            donesection = true;
                        }
                        i++;
                    }
                    curSect++;
                }
            }
            else if (priorSectionafter == 0)
            {

            }
            else if (priorSectionafter == 2)
            {

            }
            else if (priorSectionafter == 3)
            {
                selected = "";
                string current = "";
                for (int i = 0; i < input.Length + 1 - seperator.Length; i++)
                {
                    current = input.Substring(i, seperator.Length);
                    if (current == seperator)
                    {
                        curSect++;
                        i -= 1 + seperator.Length;
                    }
                    if (!(curSect == section))
                    {
                        selected += current;
                    }
                }
            }


            return selected;
        }
        static void Main(string[] args)
        {
            bool Running = true;        //variable setup
            int Menu = 0;

            string charGender = "Male";
            string charRace = "Human";
            string charClass = "Fighter";
            int charStr = 7;
            int charFlx = 7;
            int charMnd = 7;
            int charStrMod = 0;
            int charFlxMod = 0;
            int charMndMod = 0;
            int charRemainMod = 10;
            int charBlessCurseMod = 5;
            string charName = "";
            string difficulty = "Normal";
            string location = "Mansion";
            bool firstrun = true;

            int currentOption = 0;





            Console.ForegroundColor = ConsoleColor.White;
            Console.CursorVisible = false;
            Console.WindowWidth = 150;
            Console.WindowHeight = 30;
            Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
            Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
            Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
            Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
            Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
            Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
            Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
            Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
            Console.WriteLine(@"                                                              ███    ███                                                                             ");
            Console.WriteLine("Press Enter To Start");
            Console.ForegroundColor = ConsoleColor.Black;
            Console.ReadLine();
            Console.ForegroundColor = ConsoleColor.White;
            ConsoleKey input;
            char inputc;
            while (Running)
            {
                Console.Clear();
                if (Menu == 0)
                {
                    Console.CursorVisible = false;
                    Console.WindowWidth = 150;
                    Console.WindowHeight = 30;
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    text("\\cP\\wlay");      //Need to underline / bold first char (Make this input) -j
                    text("\\cO\\wptions");
                    text("\\cC\\wredits");
                    text("\\cE\\wxit");


                    inputc = Console.ReadKey().KeyChar;

                    if (inputc == 'p')
                    {
                        Menu = 1;
                    }

                    else if (inputc == 'o')
                    {
                        Menu = 2;
                    }

                    else if (inputc == 'c')
                    {
                        Menu = 3;
                    }

                    else if (inputc == 'e')
                    {
                        Running = false;
                    }
                }


                else if (Menu == 1)
                {
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    text("\\cN\\wew Game");
                    text("\\cL\\woad Game");



                    inputc = Console.ReadKey().KeyChar;
                    if (inputc == 'l')
                    {
                        Menu = 4;
                    }

                    else if (inputc == 'n')
                    {
                        Menu = 5;
                        currentOption = 0;
                    }

                }
                else if (Menu == 2)
                {
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    text("\\cJ\\wokes - \\g" + optJokey + "\\£\\w\\cS\\wound - \\g" + optSound + "\\£\\cC\\wolour - \\g" + optColour + "\\£\\£\\w\\cM\\wainmenu");
                    inputc = Console.ReadKey().KeyChar;
                    if (inputc == 'j')
                    {
                        optJokey = !optJokey;
                    }

                    else if (inputc == 's')
                    {
                        optSound = !optSound;
                    }

                    else if (inputc == 'c')
                    {
                        optColour = !optColour;
                    }

                    else if (inputc == 'm')
                    {
                        Menu = 0;
                    }
                }
                else if (Menu == 3)     //Credits
                {
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    text("CREDITS\\£Code - Orry\\£Graphics - Orry\\£3D Rendering - Joey\\£Complaints Department - Joey\\£Credits - Orry\\£Ideas - Orry and a sprinkle of Joey\\£Typos - The wo of us");
                    Console.ReadKey();
                    Menu = 0;
                }
                else if (Menu == 4)
                {
                    //game loading - o
                }
                else if (Menu == 5)
                { //difficulty choosing
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    charGender = "Male";
                    charRace = "Human";
                    charClass = "Fighter";
                    charStr = 7;
                    charFlx = 7;
                    charMnd = 7;
                    charStrMod = 0;
                    charFlxMod = 0;
                    charMndMod = 0;
                    charName = "";
                    charRemainMod = Convert.ToInt32(selectSection(info(difficulty, "difficulty"), ",", 0));
                    charBlessCurseMod = Convert.ToInt32(selectSection(info(difficulty, "difficulty"), ",", 1));
                    text("Difficulty - " + difficulty + " - " + info(difficulty, "idifficulty"));
                    text("\\£\\cN\\wext");
                    text("\\cM\\wainmenu");

                    input = Console.ReadKey().Key;
                    if (input == ConsoleKey.LeftArrow)
                    {
                        difficulty = cycle(difficulty, "difficulty", false);
                    }
                    else if (input == ConsoleKey.RightArrow)
                    {
                        difficulty = cycle(difficulty, "difficulty", true);
                    }
                    else if (input == ConsoleKey.N)
                    {
                        Menu = 6;
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }

                }
                else if (Menu == 6)
                {
                    // new game -o
                    //character creation

                    //gender
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    if (currentOption == 0)
                    {
                        text("Gender - \\g" + charGender + "\\w - " + info(charGender, "gender"));
                    }
                    else
                    {
                        text("Gender - " + charGender + "\\w - " + info(charGender, "gender"));
                    }
                    if (currentOption == 1)
                    {
                        text("Race - \\g" + charRace + "\\w - " + info(charRace, "race"));
                    }
                    else
                    {
                        text("Race - " + charRace + "\\w - " + info(charRace, "race"));
                    }
                    if (currentOption == 2)
                    {
                        text("Class - \\g" + charClass + "\\w - " + info(charClass, "class"));
                    }
                    else
                    {
                        text("Class - " + charClass + "\\w - " + info(charClass, "class"));
                    }
                    if (currentOption == 3)
                    {
                        text("Strength - \\g" + (charStr + charStrMod) + "\\w - " + info("Strength", "stats"));
                    }
                    else
                    {
                        text("Strength - " + (charStr + charStrMod) + "\\w - " + info("Strength", "stats"));
                    }
                    if (currentOption == 4)
                    {
                        text("Flexibility - \\g" + (charFlx + charFlxMod) + "\\w - " + info("Flexibility", "stats"));
                    }
                    else
                    {
                        text("Flexibility - " + (charFlx + charFlxMod) + "\\w - " + info("Flexibility", "stats"));
                    }
                    if (currentOption == 5)
                    {
                        text("Mind - \\g" + (charMnd + charMndMod) + "\\w - " + info("Mind", "stats"));
                    }
                    else
                    {
                        text("Mind - " + (charMnd + charMndMod) + "\\w - " + info("Mind", "stats"));
                    }
                    if (charRemainMod != 0)
                    {
                        text("Stat Points remaining - " + charRemainMod);
                    }
                    if (charRemainMod == 0)
                    {
                        text("\\cN\\wext");
                    }
                    text("\\£\\cI\\wnfo about options.");
                    text("\\cE\\wxtra info about chosen choices.");
                    text("\\£\\cB\\wack");
                    text("\\cM\\wainmenu");

                    input = Console.ReadKey().Key;
                    if (input == ConsoleKey.DownArrow)
                    {
                        if (currentOption != 5)
                        {
                            currentOption++;
                        }
                    }
                    else if (input == ConsoleKey.UpArrow)
                    {
                        if (currentOption != 0)
                        {
                            currentOption--;
                        }
                    }
                    else if (input == ConsoleKey.LeftArrow)
                    {
                        if (currentOption == 0)
                        {
                            charGender = cycle(charGender, "gender", false);
                        }
                        else if (currentOption == 1)
                        {
                            charRace = cycle(charRace, "race", false);
                        }
                        else if (currentOption == 2)
                        {
                            charClass = cycle(charClass, "class", false);
                        }
                        else if (currentOption == 3)
                        {
                            if (charStrMod > 0)
                            {
                                charStrMod--;
                                charRemainMod++;
                            }
                        }
                        else if (currentOption == 4)
                        {
                            if (charFlxMod > 0)
                            {
                                charFlxMod--;
                                charRemainMod++;
                            }
                        }
                        else if (currentOption == 5)
                        {
                            if (charMndMod > 0)
                            {
                                charMndMod--;
                                charRemainMod++;
                            }
                        }
                    }
                    else if (input == ConsoleKey.RightArrow)
                    {
                        if (currentOption == 0)
                        {
                            charGender = cycle(charGender, "gender", true);
                        }
                        else if (currentOption == 1)
                        {
                            charRace = cycle(charRace, "race", true);
                        }
                        else if (currentOption == 2)
                        {
                            charClass = cycle(charClass, "class", true);
                        }
                        else if (currentOption == 3)
                        {
                            if (charRemainMod > 0)
                            {
                                charStrMod++;
                                charRemainMod--;
                            }
                        }
                        else if (currentOption == 4)
                        {
                            if (charRemainMod > 0)
                            {
                                charFlxMod++;
                                charRemainMod--;
                            }
                        }
                        else if (currentOption == 5)
                        {
                            if (charRemainMod > 0)
                            {
                                charMndMod++;
                                charRemainMod--;
                            }
                        }
                    }
                    else if (input == ConsoleKey.I)
                    {
                        Console.Clear();
                        Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                        Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                        Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                        Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                        Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                        Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                        Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                        Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                        Console.WriteLine(@"                                                              ███    ███                                                                             ");

                        text("Press the up/down keys to move to a different option.");
                        text("Press the left/right keys to cycle through the choices, or add/subtract from a numerical value.");
                        text("Gender - No effect on gameplay.");
                        text("Race - Affects starting stats, spells and some ingame things.");
                        text("Class - Affects stating items and spells.");
                        text("Strength - Affects melee damage, health and stamina. Also helps resist poisons.");
                        text("Flexibility - Affects ease of hitting, dodging, and use of precision weapons eg. bow.");
                        text("Mind - Helps provides extra information to the player, improves magic and curse resistance.");
                        text("\\£Press any key to continue");
                        Console.ReadKey();
                    }
                    else if (input == ConsoleKey.E)
                    {
                        Console.Clear();
                        Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                        Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                        Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                        Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                        Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                        Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                        Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                        Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                        Console.WriteLine(@"                                                              ███    ███                                                                             ");

                        text("Race - " + charRace + "\\w - " + info(charRace, "Erace"));
                        text("Class - " + charClass + "\\w - " + info(charClass, "Eclass"));
                        text("\\£Press any key to continue");
                        Console.ReadKey();
                    }
                    else if (input == ConsoleKey.B)
                    {
                        Menu = 5;
                    }
                    else if (input == ConsoleKey.N && charRemainMod == 0)
                    {
                        Menu = 7;
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }
                }
                else if (Menu == 7)
                {
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    text("Character naming");
                    if (charName != "")
                    {
                        text("\\£Current Name - " + charName + "\\£");
                    }

                    text("\\cI\\wnput name");
                    text("\\cR\\wandom name");

                    if (charName != "")
                    {
                        text("\\£\\cN\\wext");
                        text("\\cB\\wack");
                        text("\\cM\\wainmenu");
                    }
                    else
                    {
                        text("\\£\\cB\\wack");
                        text("\\cM\\wainmenu");
                    }


                    input = Console.ReadKey().Key;

                    if (input == ConsoleKey.I)
                    {
                        Console.Clear();
                        text("Input name.\\£");
                        charName = Console.ReadLine();
                    }
                    else if (input == ConsoleKey.R)
                    {
                        charName = name(charRace, charClass, charGender);
                    }
                    else if (input == ConsoleKey.B)
                    {
                        Menu = 6;
                    }
                    else if (input == ConsoleKey.N && charName != "")
                    {
                        Menu = 8;
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }

                }
                else if (Menu == 8)
                {
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    text("Select a location for the game");
                    text(location + " - " + info(location, "location"));

                    text("\\£\\cN\\wext");
                    text("\\cB\\wack");
                    text("\\cM\\wainmenu");

                    input = Console.ReadKey().Key;
                    if (input == ConsoleKey.LeftArrow)
                    {
                        location = cycle(location, "location", false);
                    }
                    else if (input == ConsoleKey.RightArrow)
                    {
                        location = cycle(location, "location", true);
                    }
                    else if (input == ConsoleKey.N)
                    {
                        Menu = 9;
                    }
                    else if (input == ConsoleKey.B)
                    {
                        Menu = 7;
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }
                }

                else if (Menu == 12)  // attack
                {
                    if (firstrun)
                    {
                        aTimer = new System.Timers.Timer(20);
                        // Hook up the Elapsed event for the timer. 
                        aTimer.Elapsed += OnTimedEvent;
                        aTimer.AutoReset = true;
                        aTimer.Enabled = true;
                        firstrun = false;
                    }
                    if (Console.KeyAvailable)
                    {
                        input = Console.ReadKey(true).Key;
                        if (input == ConsoleKey.Spacebar)
                        {
                            int furthestatt = -1;
                            double furthestdist = 0;
                            for (int i = 0; i < Sections(attackInfo, "|"); i++)
                            {
                                if (furthestdist <= Convert.ToDouble(selectSection(selectSection(attackInfo, "|", i), ",", 5)))
                                {
                                    furthestatt = i;
                                    furthestdist = Convert.ToDouble(selectSection(selectSection(attackInfo, "|", i), ",", 5));
                                }
                            }
                            if (furthestatt != -1)
                            {
                                while (furthestatt != -1)
                                {
                                    attackInfo = selectSection(attackInfo, "|", furthestatt, 3);

                                }
                            }

                        }
                    }


                }
            }
        }
    }
}
