using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using System.IO;

namespace CustardQuest
{
    class Program
    {
        static bool optJokey = false;
        static bool optSound = true;
        static bool optColour = true;
        static int previousheight = 0;
        static int previousWriteHeight = 0;


        static string attackInfo = "";  //target,max damage, variation, min, speed, location, limb, limb damage | [next attack]


        static System.Timers.Timer aTimer;

        private static void SaveGame(gameData Data, bool optJokey, bool optSound, bool optColour, string name)
        {
            Data.optJokey = optJokey;
            Data.optSound = optSound;
            Data.optColour = optColour;
            string path = name; //add a generic file path, possibly create a file for saves.

            //if file exists check if overwrite ok, or if to change filename

            try
            {
                using (StreamWriter sw = File.CreateText(path))
                {
                    //write 'Data' to file
                }
            }
            catch
            {

            }
        }

        public class gameData
        {
            public string[,] items; //name, mass, blessings and curses, container and method, limbs, stats (0 is hp "," is seperator), extra, alignment to player, target, sentience, damage, description, dialog, moving
            public string[, ,] rooms;
            public string difficulty;
            public string location;
            public bool optJokey;
            public bool optSound;
            public bool optColour;
            public gameData()
            {
                difficulty = "Normal";
                location = "Mansion";
                items = new string[0, 14];
                rooms = new string[0, 0, 4]; //doors,space,effects,description
                optJokey = false;
                optSound = true;
                optColour = true;
            }
        }

        private static void OnTimedEvent(Object source, ElapsedEventArgs e)
        {
            string output = "";


            if (Console.KeyAvailable)
            {
                ConsoleKey input = Console.ReadKey(true).Key;
                if (input == ConsoleKey.Spacebar)
                {
                    int furthestatt = -1;
                    double furthestdist = 0;
                    for (int i = 0; i < Sections(attackInfo, "|"); i++)
                    {
                        if (furthestdist < Convert.ToDouble(selectSection(selectSection(attackInfo, "|", i), ",", 5)))
                        {
                            furthestatt = i;
                            furthestdist = Convert.ToDouble(selectSection(selectSection(attackInfo, "|", i), ",", 5));
                        }
                    }
                    if (furthestatt != -1)
                    {
                        while (furthestatt != -1)
                        {
                            attackInfo = selectSection(attackInfo, "|", furthestatt, 3);

                        }
                    }

                }
            }
            for (int i = 0; i < Sections(attackInfo, "|"); i++)
            {
                if (i != 0)
                {
                    output = output + "|";
                }
                string attack = selectSection(attackInfo, "|", i);
                string target = selectSection(attack, ",", 0);
                string maxdam = selectSection(attack, ",", 1);
                string variat = selectSection(attack, ",", 2);
                string mindam = selectSection(attack, ",", 3);
                double speed = Convert.ToDouble(selectSection(attack, ",", 4));
                double location = Convert.ToDouble(selectSection(attack, ",", 5));
                string limb = selectSection(attack, ",", 6);
                string limbdam = selectSection(attack, ",", 7);

                location += speed;
                if (location <= 150)
                {
                    output = output + attack + "," + target + "," + maxdam + "," + variat + "," + mindam + "," + speed.ToString() + "," + location.ToString() + "," + limb + "," + limbdam;
                }
                else
                {
                    if (target == "1")
                    {
                        //   items[1,5] = 
                    }




                }


            }

            attackInfo = output;
        }

        public static string name(string species, string Class, string extra)
        {
            string output = "";
            string syllables = "";


            switch (species)
            {
                case "Human":
                    if (extra == "Male")
                    {
                        syllables = @"Wy\Wil\Mack\Judd\Hann\Hop\Ab|mond\ky\kin\ra\\\ |Ham\\\\\\| |Carl\Sin\Key\Wang\Field\Niel\Craw\Jen\Hamm|son\gle\s\sen\ford\kins\ond|ton\\\\| |";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Cye\Eth\Hann\Addy\dye|ne\el\ah\\\\\|burg\dred\dre\\\\\\\\\\\\\|da\\\\\\\\\\\\\\\\\\\| |Carl\Sin\Key\Wang\Field\Niel\Craw\Jen\Hamm|son\gle\s\sen\ford\kins\ond|ton\\\\| |";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Elf":
                    if (extra == "Male")
                    {
                        syllables = @"Ael\Bes\Cal\Ar\Cy\Dre\Fi\Gil\Ha\Sae\Sol\Ta\Tahl\Ther|ah\el\har\aer\ual\var\vin\ki\lam\lar\que\or\nis\nin\ram\thal\tril\ten\brar\drim\ess\evar\lon\sar\spar\thi\us\ua\via\vain\ya|ah\el\har\aer\ual\var\vin\ki\lam\lar\que\or\nis\nin\ram\thal\tril\ten\brar\drim\ess\evar\lon\sar\spar\thi\us\ua\via\vain\ya\\\\\\\\|ah\el\har\aer\ual\var\vin\ki\lam\lar\que\or\nis\nin\ram\thal\tril\ten\brar\drim\ess\evar\lon\sar\spar\thi\us\ua\via\vain\ya\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\| |Alean\Arabi\Cyred\Dwin\Glysse\Tyr\Kille\Norre\Orle\Heasi\Cyred|atlin\anea\dlues\ghymn\ettln\itryn\mitore\nddare\thym\valsa\zea\valsa\raheal";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Ael\Bes\Cal\Ar\Cy\Dre\Fi\Gil\Ha\Sae\Sol\Ta\Tahl\Ther|ah\el\har\aer\ual\var\vin\ki\lam\lar\que\or\nis\nin\ram\thal\tril\ten\brar\drim\ess\evar\lon\sar\spar\thi\us\ua\via\vain\ya|ah\el\har\aer\ual\var\vin\ki\lam\lar\que\or\nis\nin\ram\thal\tril\ten\brar\drim\ess\evar\lon\sar\spar\thi\us\ua\via\vain\ya\\\\\\\\|ah\el\har\aer\ual\var\vin\ki\lam\lar\que\or\nis\nin\ram\thal\tril\ten\brar\drim\ess\evar\lon\sar\spar\thi\us\ua\via\vain\ya\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\| |Alean\Arabi\Cyred\Dwin\Glysse\Tyr\Kille\Norre\Orle\Heasi\Cyred|atlin\anea\dlues\ghymn\ettln\itryn\mitore\nddare\thym\valsa\zea\valsa\raheal";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Dwarf":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Orc":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Gnome":
                    if (extra == "Male")
                    {
                        syllables = @"Amp\Peck\Fitz\Jal\Lul\Ger\Bish\Mel\Giz\Gil\Zap\Tek\Fil\Sprock|dale\more\ton\bin\kle\ley\wood|ford\smith\worth\strom\stein| |Wrong\Volt\Bent\Tonk\Tin\Ret\Gim\Ser\Steel\wizz|cam\rat\fidg\bink\ker\ro\bal\vo\dyne\le|het\et\pis\guage\wheel\pow|er\\\\\\\\\\\";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Lar\Liz\Bick\Kess\Mar\Tor|a\aka\le\in\rid|beth\lyn\ella\git\\\\\\\\| |Wrong\Volt\Bent\Tonk\Tin\Ret\Gim\Ser\Steel\wizz|cam\rat\fidg\bink\ker\ro\bal\vo\dyne\le|het\et\pis\guage\wheel\pow| |";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Goblin":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Tiefling":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Kobold":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                case "Skeleton":
                    if (extra == "Male")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else if (extra == "Female")
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    else
                    {
                        syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    }
                    break;
                default:
                    syllables = @"Jo\Ba\Ean|hn\rin\ean|ath\tho\ean|on\lon\ean| Ho\ No\ Mo|mo\an\y|nym\ki\ath";
                    break;
            }


            Random rng = new Random();
            for (int i = 0; i < Sections(syllables, @"|"); i++)
            {
                string current = selectSection(syllables, @"|", i);
                int j = rng.Next(0, Sections(current, @"\"));
                output += selectSection(current, @"\", j);
            }



            switch (Class)
            {
                case "Fighter":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Druid":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Wizard":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Monk":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Paladin":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Ranger":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                case "Thief":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = @"scrubster";
                    }
                    else
                    {
                        syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    }
                    break;
                default:
                    syllables = @"the\\\of| Death\ Sword\ Shield\ Claw| of\ and\ annihilator of\ annihilator for| Crows\ Justice\ Shield\ lovely boys";
                    break;
            }

            string outputT = "";

            for (int i = 0; i < Sections(syllables, @"|"); i++)
            {
                if (i != 0)
                {
                    if (outputT != "")
                    {
                        string current = selectSection(syllables, @"|", i);
                        int j = rng.Next(0, Sections(current, @"\"));
                        outputT += selectSection(current, @"\", j);
                    }
                }
                else
                {
                    string current = selectSection(syllables, @"|", i);
                    int j = rng.Next(0, Sections(current, @"\"));
                    outputT += selectSection(current, @"\", j);

                    if (outputT != "")
                    {
                        outputT = " " + outputT;
                    }
                }
            }

            output += outputT;

            return output;
        }

        public static string cycle(string input, string type, bool right = true, bool rand = false)
        {
            string output = "";
            string[] options = new string[1];
            options[0] = "";

            switch (type)
            {
                case "gender":
                    options = new string[] { "Male", "Female" };
                    break;
                case "race":
                    options = new string[] { "Human", "Elf", "Dwarf", "Orc", "Gnome", "Goblin", "Tiefling", "Kobold", "Skeleton" };
                    break;
                case "class":
                    options = new string[] { "Fighter", "Druid", "Wizard", "Monk", "Paladin", "Ranger", "Thief", "Warlock" };
                    break;
                case "difficulty":
                    options = new string[] { "Easy", "Normal", "Hard", "Impossible" };
                    break;
                case "location":
                    options = new string[] { "Mansion", "Dungeon - Crypt", "Dungeon - Basement", "Dungeon - Treasure Store", "Cemetery", "Temple", "Sentient Forest", "Sentient Cave", "Sentient House", "Haunted House", "Abandoned Village", "Trap Maker's Shop", "Magic School" };
                    break;
            }

            int inputCode = -1;
            for (int i = 0; i < options.Length; i++)
            {
                if (input == options[i])
                {
                    inputCode = i;
                }
            }

            if (rand)
            {
                Random rng = new Random();
                inputCode = rng.Next(0, options.Length);
            }

            if (inputCode != -1)
            {
                if (right)
                {
                    inputCode++;
                }
                else
                {
                    inputCode += -1;
                }
                if (inputCode < 0)
                {
                    inputCode = options.Length - 1;
                }
                if (inputCode == options.Length)
                {
                    inputCode = 0;
                }
                output = options[inputCode];
            }
            else
            {
                output = "FAIL";
            }


            return output;
        }

        public static string info(string input, string type)
        {
            string output = "";

            switch (type)
            {
                case "gender":
                    switch (input)
                    {
                        case "Male":
                            output = "Are you Male or Female?";
                            break;
                        case "Female":
                            output = "Are you Male or Female?";
                            break;
                    }
                    break;
                case "title":
                    switch (Convert.ToInt32(input))
                    {
                        case 0:
                            output = "A-Level computer science simulator";
                            break;
                        case 1:
                            output = "KILLNOEL.com";
                            break;
                        case 2:
                            output = "i cna type vety well if i wsnt tk,";
                            break;
                        case 3:
                            output = "IT'S 2 15";
                            break;
                        case 4:
                            output = "Check the WOAH folder";
                            break;
                        case 5:
                            output = "Made in manx";
                            break;
                        default:
                            output = "Custard Quest";
                            break;
                    }
                    break;
                case "race":

                    switch (input)
                    {
                        case "Human":
                            output = "A well rounded race that can't do anthing special.";
                            break;
                        case "Elf":
                            output = "Very smart individuals who would use their mind over matter.";
                            if (optJokey)
                            {
                                output = "Lifeless individuals who do not care for the lesser races.";
                            }
                            break;
                        case "Dwarf":
                            output = "Short, strong and wise.";
                            if (optJokey)
                            {
                                output = "Short, strong, wise and a raging alcoholic.";
                            }
                            break;
                        case "Orc":
                            output = "Very strong and not very bright.";
                            if (optJokey)
                            {
                                output = "Orc more like Andc";
                            }
                            break;
                        case "Gnome":
                            output = "Great at magic but not much else.";
                            if (optJokey)
                            {
                                output = "Pretty bad tbh.";
                            }
                            break;
                        case "Goblin":
                            output = "Small selfish humanoids who can sneak anywhere.";
                            if (optJokey)
                            {
                                output = "Sneaky Beaky Like.";
                            }
                            break;
                        case "Tiefling":
                            output = "Trained in the offensive schools of magic.";
                            if (optJokey)
                            {
                                output = "Wierd demon folk who no one likes. Also into Scat. Horns provide extra clumsiness.";
                            }
                            break;
                        case "Kobold":
                            output = "Kobolds are small fury creatures who aren't very special.";
                            if (optJokey)
                            {
                                output = "KOBALLLLLLLLLDDDDDD.";
                            }
                            break;
                        case "Skeleton":
                            output = "Skeletons are restless souls who are stuck on this plane.";
                            if (optJokey)
                            {
                                output = "Thank mr Skeltal";
                            }
                            break;
                    }
                    break;
                case "Erace":

                    switch (input)
                    {
                        case "Human":
                            output = "Base 7 STR, 7 FLX, 7 MND. No other special feats.";
                            break;
                        case "Elf":
                            output = "Base 2 STR, 8 FLX, 11 MND. No other special feats.";
                            break;
                        case "Dwarf":
                            output = "Base 9 STR, 4 FLX, 7 MND. Item repair is more effective.";
                            break;
                        case "Orc":
                            output = "Base 16 STR, 4 FLX, 1 MND. Skilled with strength weapons.";
                            break;
                        case "Gnome":
                            output = "Base 7 STR, 3 FLX, 10 MND. Shop prices are lowered.";
                            break;
                        case "Goblin":
                            output = "Base 2 STR, 13 FLX, 1 MND. Can recruit fellow goblins and harder to detect.";
                            break;
                        case "Tiefling":
                            output = "Base 8 STR, 3 FLX, 9 MND. Skilled at offencive magic.";
                            break;
                        case "Kobold":
                            output = "Base 4 STR, 9 FLX, 2 MND. Special resistance and can frenzy causing MND to be added to STR";
                            break;
                        case "Skeleton":
                            output = "Base 4 STR, 3 FLX, 10 MND. Weak to smash attacks but resistant to both slash and special attacks. Can’t eat to heal but automatically  heals over time.";
                            break;
                    }
                    break;
                case "class":

                    switch (input)
                    {
                        case "Fighter":
                            output = "Trained in the arts of melee from birth but not skilled at much else.";
                            break;
                        case "Druid":
                            output = "Intune with the force of nature meaning that they can control and befriend animals.";
                            break;
                        case "Wizard":
                            output = "Can focus mystical energies and form them into powerful spells.";
                            break;
                        case "Monk":
                            output = "Trained in the ways of Ki monks can unleash devastating unarmed attacks.";
                            break;
                        case "Paladin":
                            output = "A warrior who has taken a sacred oath to protect the land and its people in the name of one powerful deity.";
                            break;
                        case "Ranger":
                            output = "Trained with a bow and can prepare excellent food from their slain enemies.";
                            break;
                        case "Thief":
                            output = "Aligned with one code - the code of thieves.";
                            break;
                        case "Warlock":
                            output = "Made a deal with a dark demon to drain his life force for powerful magics.";
                            break;
                    }
                    break;
                case "Eclass":

                    switch (input)
                    {
                        case "Fighter":
                            output = "Starts with a steel broadsword, steel shield and scalemail.";
                            break;
                        case "Druid":
                            output = "Starts with a wrist claw, ancient staff of nature and a wild ruby amulet.";
                            break;
                        case "Wizard":
                            output = "Starts with a wooden staff of arcane, enchanted cloth robes and a spellbook.";
                            break;
                        case "Monk":
                            output = "Starts with monk robes and a Ki pool.";
                            break;
                        case "Paladin":
                            output = "Starts with a hammer of light, a tall shield, padded leather armour and a light heal spell.";
                            break;
                        case "Ranger":
                            output = "Starts with a light bow and some arrows, leather armour and an animal companion.";
                            break;
                        case "Thief":
                            output = "Starts with a dagger and light stealth clothing.";
                            break;
                        case "Warlock":
                            output = "Starts with a sacrificial dagger, light clothing and a blood drain spell.";
                            break;
                    }
                    break;
                case "stats":

                    switch (input)
                    {
                        case "Strength":
                            output = "Melee Weapons, HP, Poison Resist";
                            break;
                        case "Flexibility":
                            output = "Affects hit rate and dodging, flexibility weapons.";
                            break;
                        case "Mind":
                            output = "Identifying items, magic, perception, curse resistance, detecting traps.";
                            break;
                    }
                    break;
                case "menu":

                    switch (input)
                    {
                        case "0":
                            output = "gender";
                            break;
                        case "1":
                            output = "race";
                            break;
                        case "2":
                            output = "class";
                            break;
                    }
                    break;
                case "difficulty":

                    switch (input)
                    {
                        case "Easy":
                            output = "15,5";
                            break;
                        case "Normal":
                            output = "10,0";
                            break;
                        case "Hard":
                            output = "5,-5";
                            break;
                        case "Impossible":
                            output = "0,-20";
                            break;
                    }
                    break;
                case "idifficulty":

                    switch (input)
                    {
                        case "Easy":
                            output = "All the difficulty removed. Smaller floors, weaker enemies and easier attacks.";
                            break;
                        case "Normal":
                            output = "The standard game.";
                            break;
                        case "Hard":
                            output = "The game with a bit of challenge. Larger floors, harder enemies and rarer items.";
                            break;
                        case "Impossible":
                            output = "The ways the game should be played. Massive floors, impossible enemies and barely any items.";
                            break;
                    }
                    break;
                case "location":

                    switch (input)
                    {
                        case "Mansion":
                            output = "An old abandoned mansion that an old curse inhabits.";
                            break;
                        case "Dungeon - Crypt":
                            output = "An underground tomb that houses the great King Anu Annear III.";
                            break;
                        case "Dungeon - Basement":
                            output = "An underground series of rooms and floors that was recently uncovered.";
                            break;
                        case "Dungeon - Treasure Store":
                            output = "An old abandoned store that houses the treasure of the hated Orlark Zuzha.";
                            break;
                        case "Cemetery":
                            output = "An eerie cemetery in a dead forest that now possess a dark magic.";
                            break;
                        case "Temple":
                            output = "A dark god has possessed his followers into a blood rage killing any who enter.";
                            break;
                        case "Sentient Forest":
                            output = "A forest that is always changing trying to trap anyone willing to explore it.";
                            break;
                        case "Sentient Cave":
                            output = "A cave with caverns that are always opening and closing.";
                            break;
                        case "Sentient House":
                            output = "An unhappy spirit manifests in this house trying to harm all who enter.";
                            break;
                        case "Haunted House":
                            output = "A house containing large amounts of unhappy spirits who are unable to pass on to the next plane.";
                            break;
                        case "Abandoned Village":
                            output = "A strange plague hit this village now no one dares enter it.";
                            break;
                        case "Trap Maker's Shop":
                            output = "A shop that's not well designed as the customer has to navigate the traps to buy any traps.";
                            break;
                        case "Magic School":
                            output = "A school where young minds can develop but one of the students has been experimenting with the dark arts.";
                            break;
                    }
                    break;
                case "Glocation":

                    switch (input)
                    {
                        case "Mansion":
                            output = "The massive door slams shut behind you as you enter the oft feared mansion. However, at least you're out of the rain.";
                            if (optJokey)
                            {
                                output = "You have entered Ainsley's secret mansion. Watch your step, the floor is sticky.";
                            }
                            break;
                        case "Dungeon - Crypt":
                            output = "A musty smell fills your lungs when you enter the crypt.";
                            if (optJokey)
                            {
                                output = "Fear of the recently revived Noel rattles your bones.";
                            }
                            break;
                        case "Dungeon - Basement":
                            output = "You fall through a trap door into a dark room. The trap door seals shut. The only way out is down.";
                            if (optJokey)
                            {
                                output = "Rape dungeon time.";
                            }
                            break;
                        case "Dungeon - Treasure Store":
                            output = "You find a secret entrance into a warehouse, which locks behind you.";
                            if (optJokey)
                            {
                                output = "gold everyyywhere!";
                            }
                            break;
                        case "Cemetery":
                            output = "Something grabs your foot when the clock strikes midnight. You a pulled under the ground.";
                            if (optJokey)
                            {
                                output = "something spooky rattles its boner at you";
                            }
                            break;
                        case "Temple":
                            output = "Creepy chanting fills the air.";
                            if (optJokey)
                            {
                                output = @"its party time : )";
                            }
                            break;
                        case "Sentient Forest":
                            output = "As you enter the forest you feel like someone's watching you.";
                            if (optJokey)
                            {
                                output = "a branch gets well mad at you";
                            }
                            break;
                        case "Sentient Cave":
                            output = "As you delve into the cave you hear a rumble and the sunlight disappears.";
                            if (optJokey)
                            {
                                output = "a pebble gets well mad at you";
                            }
                            break;
                        case "Sentient House":
                            output = "The door flattens into wall behind you.";
                            if (optJokey)
                            {
                                output = "the walls are talking";
                            }
                            break;
                        case "Haunted House":
                            output = "A cold feeling passes through you when the door shuts.";
                            if (optJokey)
                            {
                                output = "You get ghosts! You get ghosts! Everybody gets ghosts";
                            }
                            break;
                        case "Abandoned Village":
                            output = "You feel a strange force as you get close to the village.";
                            if (optJokey)
                            {
                                output = "Some gross guy used to live here.";
                            }
                            break;
                        case "Trap Maker's Shop":
                            output = "The owner of this shop misunderstands basic sales tactics, the very shop preventing your exit.";
                            if (optJokey)
                            {
                                output = "A bear trap wrenches off your 14th leg. You centipede.";
                            }
                            break;
                        case "Magic School":
                            output = "As you enter the school, the walls are covered in a fleshy-like material, with no one to be seen.";
                            if (optJokey)
                            {
                                output = "Harry Potter dies in front of you. :(";
                            }
                            break;
                    }
                    break;
            }




            return output;
        }

        public static void text(string input)
        {
            Console.ForegroundColor = ConsoleColor.White;
            int wait = 0;       //cyan - inputs for the user, white - default, grey - values that can be directly changed, green - good alerts, red - bad alerts or dealt damage, yellow - neutral alerts and general highlighting
            bool playing = true;
            string output = "";
            int distRight = 0;
            int distDown = 0;
            if (!(Console.CursorTop == 0))
            {
                Console.SetCursorPosition(0, previousWriteHeight);
                distDown = previousWriteHeight;
            }

            for (int i = 0; i < input.Length; i++)
            {
                if (input.Substring(i, 1) == "\\")
                {  //Text colour effects: c-cyan,g-grey,e-green,r-red,w-white,y-yellow,1-6 wait time, v-start/stop voice, b-alllettersvoice toggle, B-waitforsound to end toggle, \\/@"\"-\, \"-", £- newline, $ -clear
                    i++; //Use \\ or \ if using @ prior to quotes to have special effects
                    if (input.Substring(i, 1) == "c" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Cyan; }
                    else if (input.Substring(i, 1) == "g" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Gray; }
                    else if (input.Substring(i, 1) == "e" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Green; }
                    else if (input.Substring(i, 1) == "r" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Red; }
                    else if (input.Substring(i, 1) == "w" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.White; }
                    else if (input.Substring(i, 1) == "y" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Yellow; }
                    else if (input.Substring(i, 1) == "1") { wait = 0; }
                    else if (input.Substring(i, 1) == "2") { wait = 100; }
                    else if (input.Substring(i, 1) == "3") { wait = 250; }
                    else if (input.Substring(i, 1) == "4") { wait = 500; }
                    else if (input.Substring(i, 1) == "5") { wait = 1000; }
                    else if (input.Substring(i, 1) == "6") { wait = 2000; }
                    else if (input.Substring(i, 1) == "\\") { output += "\\"; distRight++; }
                    else if (input.Substring(i, 1) == "!") { output += "\""; distRight++; }
                    else if (input.Substring(i, 1) == "£")
                    {
                        while (distRight < Console.WindowWidth)
                        {
                            output += " ";
                            distRight++;
                        }
                    }
                    else if (input.Substring(i, 1) == "$") { Console.Clear(); }
                }
                else
                {


                    if (playing && ((Convert.ToChar(input.Substring(i, 1)) <= 'z' && Convert.ToChar(input.Substring(i, 1)) >= 'a') || (Convert.ToChar(input.Substring(i, 1)) <= 'Z' && Convert.ToChar(input.Substring(i, 1)) >= 'A')) && (Convert.ToChar(input.Substring(i, 1)) == 'u' || Convert.ToChar(input.Substring(i, 1)) == 'o' || (Convert.ToChar(input.Substring(i, 1)) == 'i' || Convert.ToChar(input.Substring(i, 1)) == 'e' || Convert.ToChar(input.Substring(i, 1)) == 'a')))
                    {
                        int wordLength = 1;
                        bool EndOfWord = true;
                        while (input.Length > i + wordLength && EndOfWord)
                        {
                            if (playing && ((Convert.ToChar(input.Substring(i + wordLength, 1)) <= 'z' && Convert.ToChar(input.Substring(i + wordLength, 1)) >= 'a') || (Convert.ToChar(input.Substring(i + wordLength, 1)) <= 'Z' && Convert.ToChar(input.Substring(i + wordLength, 1)) >= 'A')) && (Convert.ToChar(input.Substring(i + wordLength, 1)) == 'u' || Convert.ToChar(input.Substring(i + wordLength, 1)) == 'o' || (Convert.ToChar(input.Substring(i + wordLength, 1)) == 'i' || Convert.ToChar(input.Substring(i + wordLength, 1)) == 'e' || Convert.ToChar(input.Substring(i + wordLength, 1)) == 'a')))
                            {
                                wordLength++;
                            }
                            else
                            {
                                EndOfWord = false;
                            }
                        }
                        if (wordLength + distRight < Console.WindowWidth)
                        {
                            output += (input.Substring(i, 1));
                            distRight++;
                        }
                        else
                        {
                            output += " ";
                            distRight++;
                            i--;
                        }
                    }
                    else
                    {
                        output += (input.Substring(i, 1));
                        distRight++;
                    }
                }
                if (wait != 0)
                {
                    System.Threading.Thread.Sleep(wait);
                }
                if (distRight == Console.WindowWidth)
                {
                    distRight = 0;
                    distDown++;
                }
            }
            previousWriteHeight = distDown + 1;
            while (distRight != Console.WindowWidth)
            {
                output += " ";
                distRight++;
            }
            Console.WriteLine(output);
            while (distDown < previousheight)
            {
                Console.WriteLine("                                                                                                                                       ");
                distDown++;
            }
            Console.SetCursorPosition(0, previousWriteHeight);
        }

        public static int Sections(string input, string seperator) //outputs the amount of sections in the string, seperated by the seperator (so minimum 1)
        {
            int found = 1;

            for (int i = 0; i < input.Length - (seperator.Length - 1); i++)
            {
                if (input.Substring(i, seperator.Length) == seperator)
                {
                    found++;
                    i += seperator.Length - 1;
                }
            }
            return found;
        }
        public static string selectSection(string input, string seperator, int section, int priorSectionafter = 1) //section ranges from 0 to the maximum section
        {//pSa 0 = all before section, 1 = section, 2 = all after section, 3 = all excluding section
            string selected = input;
            int maxSect = Sections(input, seperator) - 1;
            int curSect = 0;
            if (priorSectionafter == 1)
            {
                while (curSect < section)
                {
                    int i = 0;
                    bool donesection = false;
                    while (!donesection)
                    {
                        if (selected.Substring(i, seperator.Length) == seperator)
                        {
                            selected = selected.Substring(i + seperator.Length);
                            donesection = true;
                        }
                        i++;
                    }
                    curSect++;
                }
                if (section < maxSect)
                {

                    int i = 0;
                    bool donesection = false;
                    while (!donesection)
                    {
                        if (selected.Substring(i, seperator.Length) == seperator)
                        {
                            selected = selected.Substring(0, i);
                            donesection = true;
                        }
                        i++;
                    }
                    curSect++;
                }
            }
            else if (priorSectionafter == 0)
            {

            }
            else if (priorSectionafter == 2)
            {

            }
            else if (priorSectionafter == 3)
            {
                selected = "";
                string current = "";
                for (int i = 0; i < input.Length + 1 - seperator.Length; i++)
                {
                    current = input.Substring(i, seperator.Length);
                    if (current == seperator)
                    {
                        curSect++;
                        i -= 1 + seperator.Length;
                    }
                    if (!(curSect == section))
                    {
                        selected += current;
                    }
                }
            }


            return selected;
        }
        static void Main(string[] args)
        {
            bool Running = true;        //variable setup
            int Menu = 0;
            string toWrite = "";
            
            string gInput = "";

            gameData CurrentGame = new gameData();
            string charGender = "Male";
            string charRace = "Human";
            string charClass = "Fighter";
            int charStr = 7;
            int charFlx = 7;
            int charMnd = 7;
            int charStrMod = 0;
            int charFlxMod = 0;
            int charMndMod = 0;
            int charRemainMod = 10;
            int charBlessCurseMod = 5;
            bool verystart = true;
            string charName = "";
            bool firstrun = true;
            Random titler = new Random();
            Console.Title = info(Convert.ToString(titler.Next(0, 100)), "title");

            string title = @"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     \£███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄\£███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██\£███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀\£███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    \£███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    \£███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    \£████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  \£                                                              ███    ███                                                                             \£";

            int currentOption = 0;


            Console.ForegroundColor = ConsoleColor.White;
            Console.CursorVisible = false;
            Console.WindowWidth = 150;
            Console.WindowHeight = 30;

            toWrite += title + @"\£Press Enter To Start";
            text(toWrite);
            Console.ForegroundColor = ConsoleColor.Black;
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ReadLine();
            toWrite = "";
            Console.ForegroundColor = ConsoleColor.White;
            ConsoleKey input;
            char inputc;
            while (Running)
            {
                Console.Title = info(Convert.ToString(titler.Next(0, 100)), "title");
                previousheight = Console.CursorTop + 3;
                Console.SetCursorPosition(0, 0);
                if (Menu == 0)
                {
                    Console.CursorVisible = false;
                    Console.WindowWidth = 150;
                    Console.WindowHeight = 30;
                    toWrite += title;

                    toWrite += "\\£\\cP\\wlay\\£\\cO\\wptions\\£\\cC\\wredits\\£\\cE\\wxit";
                    text(toWrite);
                    toWrite = "";


                    inputc = Console.ReadKey(true).KeyChar;

                    if (inputc == 'p')
                    {
                        Menu = 1;
                    }

                    else if (inputc == 'o')
                    {
                        Menu = 2;
                    }

                    else if (inputc == 'c')
                    {
                        Menu = 3;
                    }

                    else if (inputc == 'e')
                    {
                        Running = false;
                    }
                }


                else if (Menu == 1)
                {
                    toWrite += title + "\\£\\cN\\wew Game\\£\\cL\\woad Game";
                    text(toWrite);
                    toWrite = "";



                    inputc = Console.ReadKey(true).KeyChar;
                    if (inputc == 'l')
                    {
                        Menu = 4;
                    }

                    else if (inputc == 'n')
                    {
                        Menu = 5;
                        currentOption = 0;
                    }

                }
                else if (Menu == 2)
                {
                    toWrite += title + "\\£\\cJ\\wokes - \\g" + optJokey + "\\£\\w\\cS\\wound - \\g" + optSound + "\\£\\cC\\wolour - \\g" + optColour + "\\£\\£\\w\\cM\\wainmenu";
                    text(toWrite);
                    toWrite = "";
                    
                    
                    
                    inputc = Console.ReadKey(true).KeyChar;
                    if (inputc == 'j')
                    {
                        optJokey = !optJokey;
                    }

                    else if (inputc == 's')
                    {
                        optSound = !optSound;
                    }

                    else if (inputc == 'c')
                    {
                        optColour = !optColour;
                    }

                    else if (inputc == 'm')
                    {
                        Menu = 0;
                    }
                }
                else if (Menu == 3)     //Credits
                {
                    toWrite += title + "\\£CREDITS\\£Code - Orry\\£Graphics - Orry\\£3D Rendering - Joey\\£Complaints Department - Joey\\£Credits - Orry\\£Ideas - Orry and a sprinkle of Joey\\£Typos - The wo of us";
                    text(toWrite);
                    toWrite = "";
                    
                    Console.ReadKey(true);
                    Menu = 0;
                }
                else if (Menu == 4)
                {
                    //game loading - o
                }
                else if (Menu == 5)
                { //difficulty choosing

                    charGender = "Male";
                    charRace = "Human";
                    charClass = "Fighter";
                    charStr = 7;
                    charFlx = 7;
                    charMnd = 7;
                    charStrMod = 0;
                    charFlxMod = 0;
                    charMndMod = 0;
                    charName = "";
                    charRemainMod = Convert.ToInt32(selectSection(info(CurrentGame.difficulty, "difficulty"), ",", 0));
                    charBlessCurseMod = Convert.ToInt32(selectSection(info(CurrentGame.difficulty, "difficulty"), ",", 1));
                    toWrite += title + "\\£Difficulty - " + CurrentGame.difficulty + " - " + info(CurrentGame.difficulty, "idifficulty") + "\\£\\£\\cN\\wext" + "\\£\\cM\\wainmenu";
                    text(toWrite);
                    toWrite = "";
                    

                    input = Console.ReadKey(true).Key;
                    if (input == ConsoleKey.LeftArrow)
                    {
                        CurrentGame.difficulty = cycle(CurrentGame.difficulty, "difficulty", false);
                    }
                    else if (input == ConsoleKey.RightArrow)
                    {
                        CurrentGame.difficulty = cycle(CurrentGame.difficulty, "difficulty", true);
                    }
                    else if (input == ConsoleKey.N)
                    {
                        Menu = 6;
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }

                }
                else if (Menu == 6)
                {
                    // new game -o
                    //character creation

                    //gender
                    toWrite += (title);

                    if (currentOption == 0)
                    {
                        toWrite += ("\\£Gender - \\g" + charGender + "\\w - " + info(charGender, "gender"));
                    }
                    else
                    {
                        toWrite += ("\\£Gender - " + charGender + "\\w - " + info(charGender, "gender"));
                    }
                    if (currentOption == 1)
                    {
                        toWrite += ("\\£Race - \\g" + charRace + "\\w - " + info(charRace, "race"));
                    }
                    else
                    {
                        toWrite += ("\\£Race - " + charRace + "\\w - " + info(charRace, "race"));
                    }
                    if (currentOption == 2)
                    {
                        toWrite += ("\\£Class - \\g" + charClass + "\\w - " + info(charClass, "class"));
                    }
                    else
                    {
                        toWrite += ("\\£Class - " + charClass + "\\w - " + info(charClass, "class"));
                    }
                    if (currentOption == 3)
                    {
                        toWrite += ("\\£Strength - \\g" + (charStr + charStrMod) + "\\w - " + info("Strength", "stats"));
                    }
                    else
                    {
                        toWrite += ("\\£Strength - " + (charStr + charStrMod) + "\\w - " + info("Strength", "stats"));
                    }
                    if (currentOption == 4)
                    {
                        toWrite += ("\\£Flexibility - \\g" + (charFlx + charFlxMod) + "\\w - " + info("Flexibility", "stats"));
                    }
                    else
                    {
                        toWrite += ("\\£Flexibility - " + (charFlx + charFlxMod) + "\\w - " + info("Flexibility", "stats"));
                    }
                    if (currentOption == 5)
                    {
                        toWrite += ("\\£Mind - \\g" + (charMnd + charMndMod) + "\\w - " + info("Mind", "stats"));
                    }
                    else
                    {
                        toWrite += ("\\£Mind - " + (charMnd + charMndMod) + "\\w - " + info("Mind", "stats"));
                    }
                    if (charRemainMod != 0)
                    {
                        toWrite += ("\\£Stat Points remaining - " + charRemainMod);
                    }
                    if (charRemainMod == 0)
                    {
                        toWrite += ("\\£\\cN\\wext");
                    }
                    toWrite += ("\\£\\£\\cI\\wnfo about options.");
                    toWrite += ("\\£\\cE\\wxtra info about chosen choices.");
                    toWrite += ("\\£\\£\\cB\\wack");
                    toWrite += ("\\£\\cM\\wainmenu");
                    
                    
                    text(toWrite);
                    toWrite = "";
                    
                    

                    input = Console.ReadKey(true).Key;
                    if (input == ConsoleKey.DownArrow)
                    {
                        if (currentOption != 5)
                        {
                            currentOption++;
                        }
                    }
                    else if (input == ConsoleKey.UpArrow)
                    {
                        if (currentOption != 0)
                        {
                            currentOption--;
                        }
                    }
                    else if (input == ConsoleKey.LeftArrow)
                    {
                        if (currentOption == 0)
                        {
                            charGender = cycle(charGender, "gender", false);
                        }
                        else if (currentOption == 1)
                        {
                            charRace = cycle(charRace, "race", false);
                        }
                        else if (currentOption == 2)
                        {
                            charClass = cycle(charClass, "class", false);
                        }
                        else if (currentOption == 3)
                        {
                            if (charStrMod > 0)
                            {
                                charStrMod--;
                                charRemainMod++;
                            }
                        }
                        else if (currentOption == 4)
                        {
                            if (charFlxMod > 0)
                            {
                                charFlxMod--;
                                charRemainMod++;
                            }
                        }
                        else if (currentOption == 5)
                        {
                            if (charMndMod > 0)
                            {
                                charMndMod--;
                                charRemainMod++;
                            }
                        }
                    }
                    else if (input == ConsoleKey.RightArrow)
                    {
                        if (currentOption == 0)
                        {
                            charGender = cycle(charGender, "gender", true);
                        }
                        else if (currentOption == 1)
                        {
                            charRace = cycle(charRace, "race", true);
                        }
                        else if (currentOption == 2)
                        {
                            charClass = cycle(charClass, "class", true);
                        }
                        else if (currentOption == 3)
                        {
                            if (charRemainMod > 0)
                            {
                                charStrMod++;
                                charRemainMod--;
                            }
                        }
                        else if (currentOption == 4)
                        {
                            if (charRemainMod > 0)
                            {
                                charFlxMod++;
                                charRemainMod--;
                            }
                        }
                        else if (currentOption == 5)
                        {
                            if (charRemainMod > 0)
                            {
                                charMndMod++;
                                charRemainMod--;
                            }
                        }
                    }
                    else if (input == ConsoleKey.I)
                    {
                        Console.Clear();
                        toWrite += (title);

                        toWrite += ("\\£Press the up/down keys to move to a different option.");
                        toWrite += ("\\£Press the left/right keys to cycle through the choices, or add/subtract from a numerical value.");
                        toWrite += ("\\£Gender - No effect on gameplay.");
                        toWrite += ("\\£Race - Affects starting stats, spells and some ingame things.");
                        toWrite += ("\\£Class - Affects stating items and spells.");
                        toWrite += ("\\£Strength - Affects melee damage, health and stamina. Also helps resist poisons.");
                        toWrite += ("\\£Flexibility - Affects ease of hitting, dodging, and use of precision weapons eg. bow.");
                        toWrite += ("\\£Mind - Helps provides extra information to the player, improves magic and curse resistance.");
                        toWrite += ("\\£\\£Press any key to continue");
                        
                        text(toWrite);
                        toWrite = "";
                        Console.ReadKey(true);
                    }
                    else if (input == ConsoleKey.E)
                    {
                        Console.Clear();
                        toWrite += (title);

                        toWrite += ("\\£Race - " + charRace + "\\w - " + info(charRace, "Erace"));
                        toWrite += ("\\£Class - " + charClass + "\\w - " + info(charClass, "Eclass"));
                        toWrite += ("\\£\\£Press any key to continue");
                        
                        text(toWrite);
                        toWrite = "";
                        Console.ReadKey(true);
                    }
                    else if (input == ConsoleKey.B)
                    {
                        Menu = 5;
                    }
                    else if (input == ConsoleKey.N && charRemainMod == 0)
                    {
                        Menu = 7;
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }
                }
                else if (Menu == 7)
                {
                    toWrite += (title);

                    toWrite += ("\\£Character naming\\£");
                    if (charName != "")
                    {
                        toWrite += ("\\£Current Name - " + charName + "\\£");
                    }

                    toWrite += ("\\£\\cI\\wnput name");
                    toWrite += ("\\£\\cR\\wandom name");

                    if (charName != "")
                    {
                        toWrite += ("\\£\\£\\cN\\wext");
                        toWrite += ("\\£\\cB\\wack");
                        toWrite += ("\\£\\cM\\wainmenu");
                    }
                    else
                    {
                        toWrite += ("\\£\\£\\cB\\wack");
                        toWrite += ("\\£\\cM\\wainmenu");
                    }

                    
                    text(toWrite);
                    toWrite = "";

                    input = Console.ReadKey(true).Key;

                    if (input == ConsoleKey.I)
                    {
                        Console.Clear();
                        text("Input name.\\£");
                        charName = Console.ReadLine();
                    }
                    else if (input == ConsoleKey.R)
                    {
                        charName = name(charRace, charClass, charGender);
                    }
                    else if (input == ConsoleKey.B)
                    {
                        Menu = 6;
                    }
                    else if (input == ConsoleKey.N && charName != "")
                    {
                        Menu = 8;
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }

                }
                else if (Menu == 8)  //location selection
                {
                    toWrite += (title);

                    toWrite += ("\\£Select a location for the game\\£");
                    toWrite += ("\\£" + CurrentGame.location + " - " + info(CurrentGame.location, "location"));
                    toWrite += ("\\£\\£\\cR\\wandom");

                    toWrite += ("\\£\\£\\cN\\wext");
                    toWrite += ("\\£\\cB\\wack");
                    toWrite += ("\\£\\cM\\wainmenu");

                    
                    text(toWrite);
                    toWrite = "";
                    input = Console.ReadKey(true).Key;
                    if (input == ConsoleKey.LeftArrow)
                    {
                        CurrentGame.location = cycle(CurrentGame.location, "location", false);
                    }
                    else if (input == ConsoleKey.RightArrow)
                    {
                        CurrentGame.location = cycle(CurrentGame.location, "location", true);
                    }
                    else if (input == ConsoleKey.N)
                    {
                        Menu = 9;
                        //final game initialisation

                        verystart = true;

                    }
                    else if (input == ConsoleKey.B)
                    {
                        Menu = 7;
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }
                    else if (input == ConsoleKey.R)
                    {
                        CurrentGame.location = cycle(CurrentGame.location, "location", true, true);
                    }
                }
                else if (Menu == 9) //game
                {
                    if (verystart)
                    {
                        toWrite += info(CurrentGame.location, "Glocation");



                        verystart = false;
                    }
                    
                    text(toWrite);
                    toWrite = "";
                    gInput = Console.ReadLine();
                    
                }

                else if (Menu == 12)  // attack
                {
                    if (firstrun)
                    {
                        aTimer = new System.Timers.Timer(20);
                        // Hook up the Elapsed event for the timer. 
                        aTimer.Elapsed += OnTimedEvent;
                        aTimer.AutoReset = true;
                        aTimer.Enabled = true;
                        firstrun = false;
                    }
                }
            }
        }
    }
}
