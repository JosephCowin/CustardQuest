//replace description, not add. Finish making descriptions -o

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CustardQuest
{
    class Program
    {
        static bool optJokey = false;
        static bool optSound = true;
        static bool optColour = true;
        
        
        public static string name(string species, string Class, string extra)
        {
            string output = "";
            string[,] syllables = new string[0,0];
            
            
            switch (species)
            {
                case "Human":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""},{" Ho",""},{"mo",""},{"nym",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Elf":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Dwarf":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Orc":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Gnome":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Goblin":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Tiefling":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Kobold":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Skeleton":
                    if (extra == "Male")
                    {
                        syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                    }
                    else if (extra == "Female")
                    {
                        syllables = new string[,] {{"Ja",""},{"ne",""},{" th",""},{"an",""}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                default:
                    syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                break;
            }
            Random rng = new Random();
            for (int i = 0; i < syllables.Length; i++)
            {
                output += syllables[i,rng.Next(0,syllables.GetLength(i))];
            }
            
            
            
            switch (Class)
            {
                case "Fighter":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = new string[,] {{"the",""},{" Death",""},{" of",""},{"Crow",""},{"sdale","s"}};
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Druid":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = new string[,] { { "the", "" }, { " Death", "" }, { " of", "" }, { "Crow", "" }, { "sdale", "s" } };
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Wizard":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = new string[,] { { "the", "" }, { " Death", "" }, { " of", "" }, { "Crow", "" }, { "sdale", "s" } };
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Monk":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = new string[,] { { "the", "" }, { " Death", "" }, { " of", "" }, { "Crow", "" }, { "sdale", "s" } };
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Paladin":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = new string[,] { { "the", "" }, { " Death", "" }, { " of", "" }, { "Crow", "" }, { "sdale", "s" } };
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Ranger":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = new string[,] { { "the", "" }, { " Death", "" }, { " of", "" }, { "Crow", "" }, { "sdale", "s" } };
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                case "Thief":
                    if (extra == "Male" || extra == "Female")
                    {
                        syllables = new string[,] { { "the", "" }, { " Death", "" }, { " of", "" }, { "Crow", "" }, { "sdale", "s" } };
                    }
                    else
                    {
                        syllables = new string[,] {{"Ug",""},{"",""},{"ma",""},{"n",""}};
                    }
                break;
                default:
                    syllables = new string[,] {{"Jo",""},{"hn",""},{"ath",""},{"on",""}};
                break;
            }
            string outputT = "";
            for (int i = 0; i < syllables.Length; i++)
            {
                if (i != 0)
                {
                    if (outputT != "")
                    {
                        outputT += syllables[i,rng.Next(0,syllables.GetLength(i))];
                    }
                }
                else
                {
                    outputT += syllables[i,rng.Next(0,syllables.GetLength(i))];
                    
                    if (outputT != "")
                    {
                        outputT = " " + outputT;
                    }
                }
            }
            output += outputT;
            
            return output;
        }
        
        public static string cycle(string input, string type, bool right = true)
        {
            string output = "";
            string[] options = new string[1];
            options[0] = "";

            if (type == "gender")
            {
                options = new string[] { "Male", "Female" };
            }
            else if (type == "race")
            {
                options = new string[] { "Human", "Elf", "Dwarf", "Orc", "Gnome", "Goblin", "Tiefling", "Kobold", "Skeleton" };
            }
            else if (type == "class")
            {
                options = new string[] { "Fighter", "Druid", "Wizard", "Monk", "Paladin", "Ranger", "Thief", "Warlock" };
            }


            int inputCode = -1;
            for (int i = 0; i < options.Length; i++)
            {
                if (input == options[i])
                {
                    inputCode = i;
                }
            }
            if (inputCode != -1)
            {
                if (right)
                {
                    inputCode++;
                }
                else
                {
                    inputCode += -1;
                }
                if (inputCode < 0)
                {
                    inputCode = options.Length - 1;
                }
                if (inputCode == options.Length)
                {
                    inputCode = 0;
                }
                output = options[inputCode];
            }
            else
            {
                output = "FAIL";
            }


            return output;
        }

        public static string info(string input, string type)
        {
            string output = "";

            if (type == "gender")
            {
                if (input == "Male")
                {
                    output = "Are you Male or Female?";
                }
                else if (input == "Female")
                {
                    output = "Are you Male or Female?";
                }
            }
            else if (type == "race")
            {
                if (input == "Human")
                {
                    output = "A well rounded race that can't do anthing special.";
                }
                else if (input == "Elf")
                {
                    output = "Very smart individuals who would use their mind over matter.";
                    if (optJokey)
                    {
                        output = "Lifeless individuals who do not care for the lesser races.";
                    }
                }
                else if (input == "Dwarf")
                {
                    output = "Short, strong and wise.";
                    if (optJokey)
                    {
                        output = "Short, strong, wise and a raging alcoholic.";
                    }
                }
                else if (input == "Orc")
                {
                    output = "Very strong and not very bright.";
                    if (optJokey)
                    {
                        output = "ORC SMASH";
                    }
                }
                else if (input == "Gnome")
                {
                    output = "Great at magic but not much else.";
                }
                else if (input == "Goblin")
                {
                    output = "Small selfish humanoids who can sneak anywhere.";
                    if (optJokey)
                    {
                        output = "Sneaky Beaky Like.";
                    }
                }
                else if (input == "Tiefling")
                {
                    output = "Trained in the offensive schools of magic.";
                    if (optJokey)
                    {
                        output = "Wierd demon folk who no one likes. Also into Scat. Horns provide extra clumsiness.";
                    }
                }
                else if (input == "Kobold")
                {
                    output = "Innate resistance against special damage. Can frenzy, losing control but damage is raised.";
                    if (optJokey)
                    {
                        output = "KOBALLLLLLLLLTTTTTT.";
                    }
                }
                else if (input == "Skeleton")
                {
                    output = "Weak to smash damage, however innate slash resistance. Passively regenerates quickly provided health is above a threshold. Can actively regenerate. Can't eat. Detachable limbs and decent unarmed attacks.";
                    if (optJokey)
                    {
                        output += "Thank mr Skeltal";
                    }
                }
            }
            else if (type == "Erace")
            {
                if (input == "Human")
                {
                    output = "Base 7 STR, 7 FLX, 7 MND.";
                }
                else if (input == "Elf")
                {
                    output = "Base 2 STR, 8 FLX, 11 MND.";
                }
                else if (input == "Dwarf")
                {
                    output = "Base 9 STR, 4 FLX, 7 MND. Item repair is more effective.";
                }
                else if (input == "Orc")
                {
                    output = "Base 16 STR, 4 FLX, 1 MND.";
                }
                else if (input == "Gnome")
                {
                    output = "Base 7 STR, 3 FLX, 10 MND. Shop prices are lowered.";
                }
                else if (input == "Goblin")
                {
                    output = "Base 2 STR, 13 FLX, 1 MND. Very low chance of being detected. Can 'befriend' other goblins easily.";
                }
                else if (input == "Tiefling")
                {
                    output = "Base 8 STR, 3 FLX, 9 MND. Offensive magic does higher damage and is easier to learn.";
                }
                else if (input == "Kobold")
                {
                    output = "Base 4 STR, 9 FLX, 2 MND. Higher special resistance. Can frenzy- temporarily reduce MND to 0, raising STR by what MND was. Lasts until stamina runs out. Player loses control during frenzy, character attacks everything that moves.";
                }
                else if (input == "Skeleton")
                {
                    output = "Base 4 STR, 3 FLX, 10 MND. Weak to special damage. Innate slash and smash resistance. HP repairs quickly when above threshold. Can't eat. Detachable limbs that move when not attached. Decent unarmed attacks. Limbs repair slowly over time.";
                }
            }
            else if (type == "class")
            {
                if (input == "Fighter")
                {
                    output = "Good with melee, however poor at other skills.";
                }
                else if (input == "Druid")
                {
                    output = "Controls plants and animals, which can be befriended. Wild animals and plants are friendly.";
                }
                else if (input == "Wizard")
                {
                    output = "Wide variety of spells but physical attack is poor.";
                }
                else if (input == "Monk")
                {
                    output = "Can use unarmed combat and has a few spells.";
                }
                else if (input == "Paladin")
                {
                    output = "Decent with melee and has healing spells.";
                }
                else if (input == "Ranger")
                {
                    output = "Good with flexibility weapons. Good at making food! Not great with melee.";
                }
                else if (input == "Thief")
                {
                    output = "Great with traps, sneak attacks and stealth.";
                }
                else if (input == "Warlock")
                {
                    output = "Magic is very powerful, yet lacks restraint. Magic is stronger at low health.";
                }

            }
            else if (type == "Eclass")
            {
                if (input == "Fighter")
                {
                    output = "Starts with a good sword and shield, along with heavy armour. Good with high strength.";
                }
                else if (input == "Druid")
                {
                    output = "Starts with a wrist claw, nature staff, and an amulet that makes wild animals and plants less aggressive. Also begins with a spell that befriends wild animals and plants - so that they aid you. Good with high mind and moderate strength or flexibility.";
                }
                else if (input == "Wizard")
                {
                    output = "Starts with a magic staff, weakly enchanted robes, and a spellbook that can be repeatedly used to gain more spells. They start with knowing a basic fireball spell, and a bread summoning spell. Good with high mind.";
                }
                else if (input == "Monk")
                {
                    output = "Begins with monk robes. They also know spells that draw on their stamina to cause physical heightening. Good with a balance of strength and flexibility.";
                }
                else if (input == "Paladin")
                {
                    output = "Begins with a hammer that deals bonus damage to undead, a shield, and medium armour. Also begins with a light healing spell. Good with high strength and moderate mind.";
                }
                else if (input == "Ranger")
                {
                    output = "Starts with a bow and some arrows, along with light armour and an animal companion. They also have tools designed to aid in scavenging and tracking. Good with high flexibility and moderate mind.";
                }
                else if (input == "Thief")
                {
                    output = "Begins with a dagger that becomes stronger when unnoticed, and clothes that aid in hiding from enemies. Good with flexibility.";
                }
                else if (input == "Warlock")
                {
                    output = "Begins with a sacrificial dagger that may grant new spells when killing or cutting self, an amulet that increases spell power at low health, and very basic clothes. Also begins with a very weak blood draining spell.";
                }

            }
            else if (type == "stats")
            {
                if (input == "Strength")
                {
                    output = "Melee Weapons, HP, Poison Resist";
                }
                else if (input == "Flexibility")
                {
                    output = "Affects hit rate and dodging, flexibility weapons.";
                }
                else if (input == "Mind")
                {
                    output = "Identifying items, magic, perception, curse resistance, detecting traps.";
                }
            }
            else if (type == "menu")
            {
                if (input == "0")
                {
                    output = "gender";
                }
                else if (input == "1")
                {
                    output = "race";
                }
                else if (input == "2")
                {
                    output = "class";
                }
            }


            return output;
        }


        public static void text(string input)
        {
            Console.ForegroundColor = ConsoleColor.White;
            int wait = 0;       //cyan - inputs for the user, white - default, grey - values that can be directly changed, green - good alerts, red - bad alerts or dealt damage, yellow - neutral alerts and general highlighting
            bool playing = false;
            bool allLettersVoice = false;
            bool waitForSound = false;
            string output = "";

            for (int i = 0; i < input.Length; i++)
            {
                if (input.Substring(i, 1) == "\\")
                {  //Text colour effects: c-cyan,g-grey,e-green,r-red,w-white,y-yellow,1-6 wait time, v-start/stop voice, b-alllettersvoice toggle, B-waitforsound to end toggle, \\/@"\"-\, \"-", £- newline, $ -clear
                    i++; //Use \\ or \ if using @ prior to quotes to have special effects
                    if (input.Substring(i, 1) == "c" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Cyan; }
                    else if (input.Substring(i, 1) == "g" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Gray; }
                    else if (input.Substring(i, 1) == "e" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Green; }
                    else if (input.Substring(i, 1) == "r" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Red; }
                    else if (input.Substring(i, 1) == "w" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.White; }
                    else if (input.Substring(i, 1) == "y" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Yellow; }
                    else if (input.Substring(i, 1) == "1") { wait = 0; }
                    else if (input.Substring(i, 1) == "2") { wait = 100; }
                    else if (input.Substring(i, 1) == "3") { wait = 250; }
                    else if (input.Substring(i, 1) == "4") { wait = 500; }
                    else if (input.Substring(i, 1) == "5") { wait = 1000; }
                    else if (input.Substring(i, 1) == "6") { wait = 2000; }
                    else if (input.Substring(i, 1) == "v") { playing = !playing; }
                    else if (input.Substring(i, 1) == "b") { allLettersVoice = !allLettersVoice; }
                    else if (input.Substring(i, 1) == "B") { waitForSound = !waitForSound; }
                    else if (input.Substring(i, 1) == "\\") { Console.Write("\\"); }
                    else if (input.Substring(i, 1) == "!") { Console.Write("\""); }
                    else if (input.Substring(i, 1) == "£") { output += "\n"; }
                    else if (input.Substring(i, 1) == "$") { Console.Clear(); }
                }
                else
                {
                    output += (input.Substring(i, 1));


                    if (optSound && (playing && ((Convert.ToChar(input.Substring(i, 1)) <= 'z' && Convert.ToChar(input.Substring(i, 1)) >= 'a') || (Convert.ToChar(input.Substring(i, 1)) <= 'Z' && Convert.ToChar(input.Substring(i, 1)) >= 'A')) && (allLettersVoice || Convert.ToChar(input.Substring(i, 1)) == 'u' || Convert.ToChar(input.Substring(i, 1)) == 'o' || (Convert.ToChar(input.Substring(i, 1)) == 'i' || Convert.ToChar(input.Substring(i, 1)) == 'e' || Convert.ToChar(input.Substring(i, 1)) == 'a'))))
                    {
                        if (waitForSound)
                        {
                            // voice.PlaySync();
                        }
                        else
                        {
                            // voice.Play();
                        }
                    }
                }
                if (wait != 0)
                {
                    System.Threading.Thread.Sleep(wait);
                }
            }
            Console.WriteLine(output);
        }

        public static int Sections(string input, string seperator) //outputs the amount of sections in the string, seperated by the seperator, -1 (so minimum 0)
        {
            int found = 0;

            for (int i = 0; i < input.Length - (seperator.Length - 1); i++)
            {
                if (input.Substring(i, seperator.Length) == seperator)
                {
                    found++;
                    i += seperator.Length - 1;
                }
            }
            return found;
        }
        public static string selectSection(string input, string seperator, int section) //section ranges from 0 to the maximum section
        {
            string selected = input;
            int maxSect = Sections(input, seperator);
            int curSect = 0;
            while (curSect < section)
            {
                int i = 0;
                bool donesection = false;
                while (!donesection)
                {
                    if (selected.Substring(i, seperator.Length) == seperator)
                    {
                        selected = selected.Substring(i + seperator.Length);
                        donesection = true;
                    }
                    i++;
                }
                curSect++;
            }
            if (section < maxSect)
            {

                int i = 0;
                bool donesection = false;
                while (!donesection)
                {
                    if (selected.Substring(i, seperator.Length) == seperator)
                    {
                        selected = selected.Substring(0, i);
                        donesection = true;
                    }
                    i++;
                }
                curSect++;
            }

            return selected;
        }
        static void Main(string[] args)
        {
            bool Running = true;        //variable setup
            int Menu = 0;

            string charGender = "Male";
            string charRace = "Human";
            string charClass = "Fighter";
            int charStr = 7;
            int charFlx = 7;
            int charMnd = 7;
            int charStrMod = 0;
            int charFlxMod = 0;
            int charMndMod = 0;
            int charRemainMod = 10;
            string charName = "";

            int currentOption = 0;





            Console.ForegroundColor = ConsoleColor.White;
            Console.CursorVisible = false;
            Console.WindowWidth = 150;
            Console.WindowHeight = 30;
            Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
            Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
            Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
            Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
            Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
            Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
            Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
            Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
            Console.WriteLine(@"                                                              ███    ███                                                                             ");
            Console.WriteLine("Press Enter To Start");
            Console.ReadLine();
            ConsoleKey input;
            char inputc;
            while (Running)
            {
                Console.Clear();
                if (Menu == 0)
                {
                    Console.CursorVisible = false;
                    Console.WindowWidth = 150;
                    Console.WindowHeight = 30;
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    text("\\cP\\wlay");      //Need to underline / bold first char (Make this input) -j
                    text("\\cO\\wptions");
                    text("\\cC\\wredits");
                    text("\\cE\\wxit");


                    inputc = Console.ReadKey().KeyChar;

                    if (inputc == 'p')
                    {
                        Menu = 1;
                    }

                    else if (inputc == 'o')
                    {
                        Menu = 2;
                    }

                    else if (inputc == 'c')
                    {
                        Menu = 3;
                    }

                    else if (inputc == 'e')
                    {
                        Running = false;
                    }
                }


                else if (Menu == 1)
                {
                    text("Would you like to \\cl\\woad a game or make a \\cn\\wew one?");
                    inputc = Console.ReadKey().KeyChar;
                    if (inputc == 'l')
                    {
                        Menu = 4;
                    }

                    else if (inputc == 'n')
                    {
                        Menu = 5;
                        currentOption = 0;
                    }

                }
                else if (Menu == 2)
                {
                    text("\\cJ\\wokes - \\g" + optJokey + "\\£\\w\\cS\\wound - \\g" + optSound + "\\£\\cC\\wolour - \\g" + optColour + "\\£\\£\\wReturn to main menu - \\cm\\w");
                    inputc = Console.ReadKey().KeyChar;
                    if (inputc == 'j')
                    {
                        optJokey = !optJokey;
                    }

                    else if (inputc == 's')
                    {
                        optSound = !optSound;
                    }

                    else if (inputc == 'c')
                    {
                        optColour = !optColour;
                    }

                    else if (inputc == 'm')
                    {
                        Menu = 0;
                    }
                }
                else if (Menu == 3)     //Credits
                {
                    text("CREDITS\\£Code - Orry\\£Graphics - Orry\\£3D Rendering - Joey\\£Complaints Department - Joey\\£Credits - Orry\\£Ideas - Orry and a sprinkle of Joey\\£Typos - The wo of us");
                    Console.ReadKey();
                    Menu = 0;
                }
                else if (Menu == 4)
                {
                    //game loading - o
                }
                else if (Menu == 5)
                {
                    // new game -o
                    //character creation

                    //gender
                    if (currentOption == 0)
                    {
                        text("Gender - \\g" + charGender + "\\w - " + info(charGender, "gender"));
                    }
                    else
                    {
                        text("Gender - " + charGender + "\\w - " + info(charGender, "gender"));
                    }
                    if (currentOption == 1)
                    {
                        text("Race - \\g" + charRace + "\\w - " + info(charRace, "race"));
                    }
                    else
                    {
                        text("Race - " + charRace + "\\w - " + info(charRace, "race"));
                    }
                    if (currentOption == 2)
                    {
                        text("Class - \\g" + charClass + "\\w - " + info(charClass, "class"));
                    }
                    else
                    {
                        text("Class - " + charClass + "\\w - " + info(charClass, "class"));
                    }
                    if (currentOption == 3)
                    {
                        text("Strength - \\g" + (charStr+charStrMod) + "\\w - " + info("Strength", "stats"));
                    }
                    else
                    {
                        text("Strength - " + (charStr+charStrMod) + "\\w - " + info("Strength", "stats"));
                    }
                    if (currentOption == 4)
                    {
                        text("Flexibility - \\g" + (charFlx+charFlxMod) + "\\w - " + info("Flexibility", "stats"));
                    }
                    else
                    {
                        text("Flexibility - " + (charFlx+charFlxMod) + "\\w - " + info("Flexibility", "stats"));
                    }
                    if (currentOption == 5)
                    {
                        text("Mind - \\g" + (charMnd+charMndMod) + "\\w - " + info("Mind", "stats"));
                    }
                    else
                    {
                        text("Mind - " + (charMnd+charMndMod) + "\\w - " + info("Mind", "stats"));
                    }
                    if (charRemainMod > 0)
                    { 
                        text("Stat Points remaining - " + charRemainMod);
                    }
                    text("\\cN\\wext");
                    text("\\£\\cI\\wnfo about options.");
                    text("\\cE\\wxtra info about chosen choices.");
                    text("\\£\\cM\\wain menu");

                    input = Console.ReadKey().Key;
                    if (input == ConsoleKey.DownArrow)
                    {
                        if (currentOption != 5)
                        {
                            currentOption++;
                        }
                    }
                    else if (input == ConsoleKey.UpArrow)
                    {
                        if (currentOption != 0)
                        {
                            currentOption--;
                        }
                    }
                    else if (input == ConsoleKey.LeftArrow)
                    {
                        if (currentOption == 0)
                        {
                            charGender = cycle(charGender, "gender", false);
                        }
                        else if (currentOption == 1)
                        {
                            charRace = cycle(charRace, "race", false);
                        }
                        else if (currentOption == 2)
                        {
                            charClass = cycle(charClass, "class", false);
                        }
                        else if (currentOption == 3)
                        {
                            if (charStrMod > 0)
                            {
                                charStrMod--;
                                charRemainMod++;
                            }
                        }
                        else if (currentOption == 4)
                        {
                            if (charFlxMod > 0)
                            {
                                charFlxMod--;
                                charRemainMod++;
                            }
                        }
                        else if (currentOption == 5)
                        {
                            if (charMndMod > 0)
                            {
                                charMndMod--;
                                charRemainMod++;
                            }
                        }
                    }
                    else if (input == ConsoleKey.RightArrow)
                    {
                        if (currentOption == 0)
                        {
                            charGender = cycle(charGender, "gender", true);
                        }
                        else if (currentOption == 1)
                        {
                            charRace = cycle(charRace, "race", true);
                        }
                        else if (currentOption == 2)
                        {
                            charClass = cycle(charClass, "class", true);
                        }
                        else if (currentOption == 3)
                        {
                            if (charRemainMod > 0)
                            {
                                charStrMod++;
                                charRemainMod--;
                            }
                        }
                        else if (currentOption == 4)
                        {
                            if (charRemainMod > 0)
                            {
                                charFlxMod++;
                                charRemainMod--;
                            }
                        }
                        else if (currentOption == 5)
                        {
                            if (charRemainMod > 0)
                            {
                                charMndMod++;
                                charRemainMod--;
                            }
                        }
                    }
                    else if (input == ConsoleKey.I)
                    {
                        Console.Clear();
                        text("Press the up/down keys to move to a different option.");
                        text("Press the left/right keys to cycle through the choices, or add/subtract from a numerical value.");
                        text("Gender - No effect on gameplay.");
                        text("Race - Affects starting stats, spells and some ingame things.");
                        text("Class - Affects stating items and spells.");
                        text("Strength - Affects melee damage, health and stamina. Also helps resist poisons.");
                        text("Flexibility - Affects ease of hitting, dodging, and use of precision weapons eg. bow.");
                        text("Mind - Helps provides extra information to the player, improves magic and curse resistance.");
                        Console.ReadKey();
                    }
                    else if (input == ConsoleKey.E)
                    {
                        Console.Clear();
                        text("Race - " + charRace + "\\w - " + info(charRace, "Erace"));
                        text("Class - " + charClass + "\\w - " + info(charClass, "Eclass"));
                        Console.ReadKey();
                    }
                    else if (input == ConsoleKey.M)
                    {
                        Menu = 0;
                    }
                    else if (input == ConsoleKey.N)
                    {
                        Menu = 6;
                    }
                }
                else if (Menu == 6)
                {
                    text("Character naming");
                    if (charName != "")
                    {
                        text("\\£Current Name - " + charName + "\\£");
                    }
                    
                    text("\\cI\\wnput name");
                    text("\\cR\\wandom name");
                    text("\\cB\\wack");
                    
                    
                    input = Console.ReadKey().Key;
                    
                    if (input == ConsoleKey.I)
                    {
                        Console.Clear();
                        text("Input name.\\£");
                        charName = Console.ReadLine();
                    }
                    else if (input == ConsoleKey.R)
                    {
                        charName = name(charRace, charClass, charGender);
                    }
                    else if (input == ConsoleKey.B)
                    {
                        Menu = 5;
                    }
                }
            }
        }
    }
}
