
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CustardQuest
{
    class Program
    {
        static bool optJokey = false;
        static bool optSound = true;
        static bool optColour = true;

        public static string cycle(string input, string type, bool right = true)
        {
            string output = "";
            string[] options = new string[1];
            options[0] = "";

            if (type == "gender")
            {
                options = new string[] { "Male", "Female" };
            }
            else if (type == "race")
            {
                options = new string[] { "Human", "Elf", "Dwarf", "Orc", "Gnome", "Goblin", "Tiefling", "Kobold", "Skeleton" };
            }
            else if (type == "species")
            {
                options = new string[] { "Male", "Female" };
            }


            int inputCode = -1;
            for (int i = 0; i < options.Length; i++)
            {
                if (input == options[i])
                {
                    inputCode = i;
                }
            }
            if (inputCode != -1)
            {
                if (right)
                {
                    inputCode++;
                }
                else
                {
                    inputCode--;
                }
                if (inputCode < 0)
                {
                    inputCode = options.Length - 1;
                }
                if (inputCode == options.Length)
                {
                    inputCode = 0;
                }
                for (int i = 0; i < options.Length; i++)
                {
                    if (inputCode == i)
                    {
                        output = options[i];
                    }
                }
            }


            return output;
        }

        public static string info(string input, string type)
        {
            string output = "";

            if (type == "gender")
            {
                if (input == "Male")
                {
                    output = "Has no effect on gameplay.";
                }
                else if (input == "Female")
                {
                    output = "Has no effect on gameplay.";
                }
            }
            else if (type == "race")
            {
                if (input == "Human")
                {
                    output = "Well rounded. Class bonuses are larger.";
                }
                else if (input == "Elf")
                {
                    output = "High mind, lower flexibility, little strength.";
                }
                else if (input == "Dwarf")
                {
                    output = "High strength, lower mind, very low flex. Good perception and good at repairing items.";
                }
                else if (input == "Orc")
                {
                    output = "Highest strength, very low mind, little flex.";
                }
                else if (input == "Gnome")
                {
                    output = "Great at magic but not much else. Good shop prices.";
                }
                else if (input == "Goblin")
                {
                    output = "Stealthy. Enemies may be friendly.";
                }
                else if (input == "Tiefling")
                {
                    output = "Good at offensive magic, decent strength.";
                }
                else if (input == "Kobold")
                {
                    output = "Innate resistance against special damage. Can frenzy, losing control but damage is raised.";
                }
                else if (input == "Skeleton")
                {
                    output = "Weak to special damage, however innate slash and smash resistance. Passively regenerates quickly provided health is above a threshold. Can actively regenerate. Can't eat. Detachable limbs and decent unarmed attacks.";
                    if (optJokey)
                    {
                        output += " May get drafted, ending the adventure.";
                    }
                }
            }
            else if (type == "class")
            {
                if (input == "Fighter")
                {
                    output = "Good with melee, however poor at other skills.";
                }
                else if (input == "Druid")
                {
                    output = "Controls plants and animals, which can be befriended. Wild animals and plants are friendly.";
                }
                else if (input == "Wizard")
                {
                    output = "Wide variety of spells but physical attack is poor.";
                }
                else if (input == "Monk")
                {
                    output = "Can use unarmed combat and has a few spells.";
                }
                else if (input == "Paladin")
                {
                    output = "Decent with melee and has healing spells.";
                }
                else if (input == "Ranger")
                {
                    output = "Good with flexibility weapons. Good at making food! Not great with melee.";
                }
                else if (input == "Thief")
                {
                    output = "Great with traps, sneak attacks and stealth.";
                }
                else if (input == "Warlock")
                {
                    output = "Magic is very powerful, yet lacks restraint. Health is lost every time a spell is used.";
                }

            }
            else if (type == "stats")
            {
                if (input == "Strength")
                {
                    output = "Melee Weapons, HP, Poison Resist";
                }
                else if (input == "Flexibility")
                {
                    output = "Affects hit rate and dodging, flexibility weapons.";
                }
                else if (input == "Mind")
                {
                    output = "Identifying items, magic, perception, curse resistance, detecting traps.";
                }
            }


            return output;
        }


        public static void text(string input)
        {
            Console.ForegroundColor = ConsoleColor.White;
            int wait = 0;       //cyan - inputs for the user, white - default, grey - values that can be directly changed, green - good alerts, red - bad alerts or dealt damage, yellow - neutral alerts and general highlighting
            bool playing = false;
            bool allLettersVoice = false;
            bool waitForSound = false;
            string output = "";

            for (int i = 0; i < input.Length; i++)
            {
                if (input.Substring(i, 1) == "\\")
                {  //Text colour effects: c-cyan,g-grey,e-green,r-red,w-white,y-yellow,1-6 wait time, v-start/stop voice, b-alllettersvoice toggle, B-waitforsound to end toggle, \\/@"\"-\, \"-", £- newline, $ -clear
                    i++; //Use \\ or \ if using @ prior to quotes to have special effects
                    if (input.Substring(i, 1) == "c" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Cyan; }
                    else if (input.Substring(i, 1) == "g" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Gray; }
                    else if (input.Substring(i, 1) == "e" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Green; }
                    else if (input.Substring(i, 1) == "r" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Red; }
                    else if (input.Substring(i, 1) == "w" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.White; }
                    else if (input.Substring(i, 1) == "y" && optColour) { Console.Write(output); output = ""; Console.ForegroundColor = ConsoleColor.Yellow; }
                    else if (input.Substring(i, 1) == "1") { wait = 0; }
                    else if (input.Substring(i, 1) == "2") { wait = 100; }
                    else if (input.Substring(i, 1) == "3") { wait = 250; }
                    else if (input.Substring(i, 1) == "4") { wait = 500; }
                    else if (input.Substring(i, 1) == "5") { wait = 1000; }
                    else if (input.Substring(i, 1) == "6") { wait = 2000; }
                    else if (input.Substring(i, 1) == "v") { playing = !playing; }
                    else if (input.Substring(i, 1) == "b") { allLettersVoice = !allLettersVoice; }
                    else if (input.Substring(i, 1) == "B") { waitForSound = !waitForSound; }
                    else if (input.Substring(i, 1) == "\\") { Console.Write("\\"); }
                    else if (input.Substring(i, 1) == "!") { Console.Write("\""); }
                    else if (input.Substring(i, 1) == "£") { output += "\n"; }
                    else if (input.Substring(i, 1) == "$") { Console.Clear(); }
                }
                else
                {
                    output += (input.Substring(i, 1));


                    if (optSound && (playing && ((Convert.ToChar(input.Substring(i, 1)) <= 'z' && Convert.ToChar(input.Substring(i, 1)) >= 'a') || (Convert.ToChar(input.Substring(i, 1)) <= 'Z' && Convert.ToChar(input.Substring(i, 1)) >= 'A')) && (allLettersVoice || Convert.ToChar(input.Substring(i, 1)) == 'u' || Convert.ToChar(input.Substring(i, 1)) == 'o' || (Convert.ToChar(input.Substring(i, 1)) == 'i' || Convert.ToChar(input.Substring(i, 1)) == 'e' || Convert.ToChar(input.Substring(i, 1)) == 'a'))))
                    {
                        if (waitForSound)
                        {
                            // voice.PlaySync();
                        }
                        else
                        {
                            // voice.Play();
                        }
                    }
                }
                if (wait != 0)
                {
                    System.Threading.Thread.Sleep(wait);
                }
            }
            Console.WriteLine(output);
        }

        public static int Sections(string input, string seperator) //outputs the amount of sections in the string, seperated by the seperator, -1 (so minimum 0)
        {
            int found = 0;

            for (int i = 0; i < input.Length - (seperator.Length - 1); i++)
            {
                if (input.Substring(i, seperator.Length) == seperator)
                {
                    found++;
                    i += seperator.Length - 1;
                }
            }
            return found;
        }
        public static string selectSection(string input, string seperator, int section) //section ranges from 0 to the maximum section
        {
            string selected = input;
            int maxSect = Sections(input, seperator);
            int curSect = 0;
            while (curSect < section)
            {
                int i = 0;
                bool donesection = false;
                while (!donesection)
                {
                    if (selected.Substring(i, seperator.Length) == seperator)
                    {
                        selected = selected.Substring(i + seperator.Length);
                        donesection = true;
                    }
                    i++;
                }
                curSect++;
            }
            if (section < maxSect)
            {

                int i = 0;
                bool donesection = false;
                while (!donesection)
                {
                    if (selected.Substring(i, seperator.Length) == seperator)
                    {
                        selected = selected.Substring(0, i);
                        donesection = true;
                    }
                    i++;
                }
                curSect++;
            }

            return selected;
        }
        static void Main(string[] args)
        {
            bool Running = true;        //variable setup
            int Menu = 0;

            string charGender = "Male";
            string charRace = "Human";
            string charClass = "Fighter";
            int charStr = 5;
            int charFlx = 5;
            int charMnd = 5;
            string charName = "";

            int currentOption = 0;





            Console.ForegroundColor = ConsoleColor.White;
            Console.CursorVisible = false;
            Console.WindowWidth = 150;
            Console.WindowHeight = 30;
            Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
            Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
            Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
            Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
            Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
            Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
            Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
            Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
            Console.WriteLine(@"                                                              ███    ███                                                                             ");
            Console.WriteLine("Press Enter To Start");
            Console.ReadLine();
            while (Running)
            {
                Console.Clear();
                if (Menu == 0)
                {
                    Console.CursorVisible = false;
                    Console.WindowWidth = 150;
                    Console.WindowHeight = 30;
                    Console.WriteLine(@"▄████████ ███    █▄     ▄████████     ███        ▄████████    ▄████████ ████████▄       ████████▄   ███    █▄     ▄████████    ▄████████     ███     ");
                    Console.WriteLine(@"███    ███ ███    ███   ███    ███ ▀█████████▄   ███    ███   ███    ███ ███   ▀███      ███    ███  ███    ███   ███    ███   ███    ███ ▀█████████▄");
                    Console.WriteLine(@"███    █▀  ███    ███   ███    █▀     ▀███▀▀██   ███    ███   ███    ███ ███    ███      ███    ███  ███    ███   ███    █▀    ███    █▀     ▀███▀▀██");
                    Console.WriteLine(@"███        ███    ███   ███            ███   ▀   ███    ███  ▄███▄▄▄▄██▀ ███    ███      ███    ███  ███    ███  ▄███▄▄▄       ███            ███   ▀");
                    Console.WriteLine(@"███        ███    ███ ▀███████████     ███     ▀███████████ ▀▀███▀▀▀▀▀   ███    ███      ███    ███  ███    ███ ▀▀███▀▀▀     ▀███████████     ███    ");
                    Console.WriteLine(@"███    █▄  ███    ███          ███     ███       ███    ███ ▀███████████ ███    ███      ███    ███  ███    ███   ███    █▄           ███     ███    ");
                    Console.WriteLine(@"███    ███ ███    ███    ▄█    ███     ███       ███    ███   ███    ███ ███   ▄███      ███  ▀ ███  ███    ███   ███    ███    ▄█    ███     ███    ");
                    Console.WriteLine(@"████████▀  ████████▀   ▄████████▀     ▄████▀     ███    █▀    ███    ███ ████████▀        ▀██████▀▄█ ████████▀    ██████████  ▄████████▀     ▄████▀  ");
                    Console.WriteLine(@"                                                              ███    ███                                                                             ");

                    text("\\cP\\wlay");      //Need to underline / bold first char (Make this input) -j
                    text("\\cO\\wptions");
                    text("\\cC\\wredits");
                    text("\\cE\\wxit");


                    char input = Console.ReadKey().KeyChar;

                    if (input == 'p')
                    {
                        Menu = 1;
                    }

                    else if (input == 'o')
                    {
                        Menu = 2;
                    }

                    else if (input == 'c')
                    {
                        Menu = 3;
                    }

                    else if (input == 'e')
                    {
                        Running = false;
                    }
                }


                else if (Menu == 1)
                {
                    text("Would you like to \\cl\\woad a game or make a \\cn\\wew one?");
                    char input = Console.ReadKey().KeyChar;
                    if (input == 'l')
                    {
                        Menu = 4;
                    }

                    else if (input == 'n')
                    {
                        Menu = 5;
                        currentOption = 0;
                    }

                }
                else if (Menu == 2)
                {
                    text("\\cJ\\wokes - \\g" + optJokey + "\\£\\w\\cS\\wound - \\g" + optSound + "\\£\\cC\\wolour - \\g" + optColour + "\\£\\£\\wReturn to main menu - \\cm\\w");
                    char input = Console.ReadKey().KeyChar;
                    if (input == 'j')
                    {
                        optJokey = !optJokey;
                    }

                    else if (input == 's')
                    {
                        optSound = !optSound;
                    }

                    else if (input == 'c')
                    {
                        optColour = !optColour;
                    }

                    else if (input == 'm')
                    {
                        Menu = 0;
                    }
                }
                else if (Menu == 3)     //Credits
                {
                    text("CREDITS\\£Code - Orry\\£Graphics - Orry\\£3D Rendering - Joey\\£Complaints Department - Joey\\£Credits - Orry\\£Ideas - Orry and a sprinkle of Joey\\£Typos - The wo of us");
                    Console.ReadKey();
                    Menu = 0;
                }
                else if (Menu == 4)
                {
                    //game loading - o
                }
                else if (Menu == 5)
                {
                    // new game -o
                    //character creation

                    //gender
                    if (currentOption == 0)
                    {
                        text("Gender - \\g" + charGender + "\\w - " + info(charGender, "gender"));
                    }
                    else
                    {
                        text("Gender - " + charGender + "\\w - " + info(charGender, "gender"));
                    }
                    if (currentOption == 1)
                    {
                        text("Race - \\g" + charRace + "\\w - " + info(charRace, "race"));
                    }
                    else
                    {
                        text("Race - " + charRace + "\\w - " + info(charRace, "race"));
                    }
                    if (currentOption == 2)
                    {
                        text("Class - \\g" + charClass + "\\w - " + info(charClass, "class"));
                    }
                    else
                    {
                        text("Class - " + charClass + "\\w - " + info(charClass, "class"));
                    }
                    if (currentOption == 3)
                    {
                        text("Strength - \\g" + charStr + "\\w - " + info("Strength", "stats"));
                    }
                    else
                    {
                        text("Strength - " + charStr + "\\w - " + info("Strength", "stats"));
                    }
                    if (currentOption == 4)
                    {
                        text("Flexibility - \\g" + charFlx + "\\w - " + info("Flexibility", "stats"));
                    }
                    else
                    {
                        text("Flexibility - " + charFlx + "\\w - " + info("Flexibility", "stats"));
                    }
                    if (currentOption == 5)
                    {
                        text("Mind - \\g" + charMnd + "\\w - " + info("Mind", "stats"));
                    }
                    else
                    {
                        text("Mind - " + charMnd + "\\w - " + info("Mind", "stats"));
                    }

                    ConsoleKey input = Console.ReadKey().Key;
                    if (input == ConsoleKey.DownArrow)
                    {
                        if (currentOption != 5)
                        {
                            currentOption++;
                        }
                    }
                    else if (input == ConsoleKey.UpArrow)
                    {
                        if (currentOption != 0)
                        {
                            currentOption--;
                        }
                    }
                }
            }
        }
    }
}
